
aktarim_sinyal_yeni.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08005e3c  08005e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006040  08006040  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08006040  08006040  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006040  08006040  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000006c  080060b4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  080060b4  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe3f  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002229  00000000  00000000  0002ff16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00032140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae7  00000000  00000000  00032ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013150  00000000  00000000  000339d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103ae  00000000  00000000  00046b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007adb7  00000000  00000000  00056ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003440  00000000  00000000  000d1c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d50cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005e24 	.word	0x08005e24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08005e24 	.word	0x08005e24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f001 f876 	bl	80014ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f89f 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 fb71 	bl	8000ae8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000406:	f000 f8df 	bl	80005c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800040a:	f000 f95f 	bl	80006cc <MX_TIM3_Init>
  MX_TIM16_Init();
 800040e:	f000 f9d9 	bl	80007c4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000412:	f000 fa5f 	bl	80008d4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000416:	f000 fae5 	bl	80009e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800041a:	f000 fb31 	bl	8000a80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800041e:	4b3c      	ldr	r3, [pc, #240]	; (8000510 <main+0x11c>)
 8000420:	2100      	movs	r1, #0
 8000422:	0018      	movs	r0, r3
 8000424:	f002 fa2a 	bl	800287c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000428:	4b39      	ldr	r3, [pc, #228]	; (8000510 <main+0x11c>)
 800042a:	2104      	movs	r1, #4
 800042c:	0018      	movs	r0, r3
 800042e:	f002 fa25 	bl	800287c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000432:	4b37      	ldr	r3, [pc, #220]	; (8000510 <main+0x11c>)
 8000434:	2108      	movs	r1, #8
 8000436:	0018      	movs	r0, r3
 8000438:	f002 fa20 	bl	800287c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <main+0x11c>)
 800043e:	210c      	movs	r1, #12
 8000440:	0018      	movs	r0, r3
 8000442:	f002 fa1b 	bl	800287c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000446:	4b33      	ldr	r3, [pc, #204]	; (8000514 <main+0x120>)
 8000448:	2100      	movs	r1, #0
 800044a:	0018      	movs	r0, r3
 800044c:	f002 fa16 	bl	800287c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000450:	4b30      	ldr	r3, [pc, #192]	; (8000514 <main+0x120>)
 8000452:	2104      	movs	r1, #4
 8000454:	0018      	movs	r0, r3
 8000456:	f002 fa11 	bl	800287c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 800045a:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <main+0x120>)
 800045c:	2108      	movs	r1, #8
 800045e:	0018      	movs	r0, r3
 8000460:	f002 fa0c 	bl	800287c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8000464:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <main+0x120>)
 8000466:	210c      	movs	r1, #12
 8000468:	0018      	movs	r0, r3
 800046a:	f002 fa07 	bl	800287c <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800046e:	4b2a      	ldr	r3, [pc, #168]	; (8000518 <main+0x124>)
 8000470:	2100      	movs	r1, #0
 8000472:	0018      	movs	r0, r3
 8000474:	f002 f8d2 	bl	800261c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000478:	4b28      	ldr	r3, [pc, #160]	; (800051c <main+0x128>)
 800047a:	2100      	movs	r1, #0
 800047c:	0018      	movs	r0, r3
 800047e:	f002 f8cd 	bl	800261c <HAL_TIM_PWM_Start>
  TIM16 -> CCR1 = 0;
 8000482:	4b27      	ldr	r3, [pc, #156]	; (8000520 <main+0x12c>)
 8000484:	2200      	movs	r2, #0
 8000486:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17 -> CCR1 = 0;
 8000488:	4b26      	ldr	r3, [pc, #152]	; (8000524 <main+0x130>)
 800048a:	2200      	movs	r2, #0
 800048c:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_UART_Receive_IT(&huart1, &uart_incoming, 1);
 800048e:	4926      	ldr	r1, [pc, #152]	; (8000528 <main+0x134>)
 8000490:	4b26      	ldr	r3, [pc, #152]	; (800052c <main+0x138>)
 8000492:	2201      	movs	r2, #1
 8000494:	0018      	movs	r0, r3
 8000496:	f003 fcd3 	bl	8003e40 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t i;
  uint8_t crlf[2]={'\r','\n'};
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4a24      	ldr	r2, [pc, #144]	; (8000530 <main+0x13c>)
 800049e:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    uart_tx_buffer[0] = '{';
 80004a0:	4b24      	ldr	r3, [pc, #144]	; (8000534 <main+0x140>)
 80004a2:	227b      	movs	r2, #123	; 0x7b
 80004a4:	701a      	strb	r2, [r3, #0]
    for(i=0; i<8; i++){
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
 80004ac:	e016      	b.n	80004dc <main+0xe8>
      itoa(pwm_vals[i], &uart_tx_buffer[3*i+1], 16);
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b21      	ldr	r3, [pc, #132]	; (8000538 <main+0x144>)
 80004b4:	0052      	lsls	r2, r2, #1
 80004b6:	5ad3      	ldrh	r3, [r2, r3]
 80004b8:	0018      	movs	r0, r3
 80004ba:	1dfb      	adds	r3, r7, #7
 80004bc:	781a      	ldrb	r2, [r3, #0]
 80004be:	0013      	movs	r3, r2
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	189b      	adds	r3, r3, r2
 80004c4:	1c5a      	adds	r2, r3, #1
 80004c6:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <main+0x140>)
 80004c8:	18d3      	adds	r3, r2, r3
 80004ca:	2210      	movs	r2, #16
 80004cc:	0019      	movs	r1, r3
 80004ce:	f005 fba3 	bl	8005c18 <itoa>
    for(i=0; i<8; i++){
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	3201      	adds	r2, #1
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b07      	cmp	r3, #7
 80004e2:	d9e4      	bls.n	80004ae <main+0xba>
    }
    uart_tx_buffer[25] = '}';
 80004e4:	4b13      	ldr	r3, [pc, #76]	; (8000534 <main+0x140>)
 80004e6:	227d      	movs	r2, #125	; 0x7d
 80004e8:	765a      	strb	r2, [r3, #25]
    //sprintf(uart_tx_buffer, "{%03x%03x%03x%03x%03x%03x%03x%03x}", pwm_vals[0], pwm_vals[1], pwm_vals[2], pwm_vals[3], pwm_vals[4], pwm_vals[5], pwm_vals[6], pwm_vals[7]);
    HAL_UART_Transmit(&huart1, uart_tx_buffer, 26, 10);
 80004ea:	4912      	ldr	r1, [pc, #72]	; (8000534 <main+0x140>)
 80004ec:	480f      	ldr	r0, [pc, #60]	; (800052c <main+0x138>)
 80004ee:	230a      	movs	r3, #10
 80004f0:	221a      	movs	r2, #26
 80004f2:	f003 fc01 	bl	8003cf8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, uart_tx_buffer, 26, 10);
 80004f6:	490f      	ldr	r1, [pc, #60]	; (8000534 <main+0x140>)
 80004f8:	4810      	ldr	r0, [pc, #64]	; (800053c <main+0x148>)
 80004fa:	230a      	movs	r3, #10
 80004fc:	221a      	movs	r2, #26
 80004fe:	f003 fbfb 	bl	8003cf8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, crlf, 2, 5);
 8000502:	1d39      	adds	r1, r7, #4
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0x148>)
 8000506:	2305      	movs	r3, #5
 8000508:	2202      	movs	r2, #2
 800050a:	f003 fbf5 	bl	8003cf8 <HAL_UART_Transmit>
    uart_tx_buffer[0] = '{';
 800050e:	e7c7      	b.n	80004a0 <main+0xac>
 8000510:	20000088 	.word	0x20000088
 8000514:	200000d4 	.word	0x200000d4
 8000518:	20000120 	.word	0x20000120
 800051c:	2000016c 	.word	0x2000016c
 8000520:	40014400 	.word	0x40014400
 8000524:	40014800 	.word	0x40014800
 8000528:	200002e0 	.word	0x200002e0
 800052c:	200001b8 	.word	0x200001b8
 8000530:	00000a0d 	.word	0x00000a0d
 8000534:	200002f0 	.word	0x200002f0
 8000538:	20000000 	.word	0x20000000
 800053c:	2000024c 	.word	0x2000024c

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b08d      	sub	sp, #52	; 0x34
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	2414      	movs	r4, #20
 8000548:	193b      	adds	r3, r7, r4
 800054a:	0018      	movs	r0, r3
 800054c:	231c      	movs	r3, #28
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f005 fc2b 	bl	8005dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000556:	003b      	movs	r3, r7
 8000558:	0018      	movs	r0, r3
 800055a:	2314      	movs	r3, #20
 800055c:	001a      	movs	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	f005 fc24 	bl	8005dac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2202      	movs	r2, #2
 8000568:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	0052      	lsls	r2, r2, #1
 8000570:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2240      	movs	r2, #64	; 0x40
 800057c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	193b      	adds	r3, r7, r4
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fb53 	bl	8001c2c <HAL_RCC_OscConfig>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800058a:	f000 fcc9 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	003b      	movs	r3, r7
 8000590:	2207      	movs	r2, #7
 8000592:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000594:	003b      	movs	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	003b      	movs	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005a0:	003b      	movs	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005a6:	003b      	movs	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ac:	003b      	movs	r3, r7
 80005ae:	2101      	movs	r1, #1
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fd1f 	bl	8001ff4 <HAL_RCC_ClockConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005ba:	f000 fcb1 	bl	8000f20 <Error_Handler>
  }
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b00d      	add	sp, #52	; 0x34
 80005c4:	bd90      	pop	{r4, r7, pc}
	...

080005c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ce:	2314      	movs	r3, #20
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	0018      	movs	r0, r3
 80005d4:	230c      	movs	r3, #12
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f005 fbe7 	bl	8005dac <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2310      	movs	r3, #16
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f005 fbe0 	bl	8005dac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ec:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <MX_TIM1_Init+0xf8>)
 80005ee:	4a35      	ldr	r2, [pc, #212]	; (80006c4 <MX_TIM1_Init+0xfc>)
 80005f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23;
 80005f2:	4b33      	ldr	r3, [pc, #204]	; (80006c0 <MX_TIM1_Init+0xf8>)
 80005f4:	2217      	movs	r2, #23
 80005f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f8:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <MX_TIM1_Init+0xf8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80005fe:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <MX_TIM1_Init+0xf8>)
 8000600:	4a31      	ldr	r2, [pc, #196]	; (80006c8 <MX_TIM1_Init+0x100>)
 8000602:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000604:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <MX_TIM1_Init+0xf8>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800060a:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <MX_TIM1_Init+0xf8>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000610:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_TIM1_Init+0xf8>)
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000616:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <MX_TIM1_Init+0xf8>)
 8000618:	0018      	movs	r0, r3
 800061a:	f002 f8d7 	bl	80027cc <HAL_TIM_IC_Init>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000622:	f000 fc7d 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000626:	2114      	movs	r1, #20
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800063a:	187a      	adds	r2, r7, r1
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <MX_TIM1_Init+0xf8>)
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f003 f985 	bl	8003950 <HAL_TIMEx_MasterConfigSynchronization>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 800064a:	f000 fc69 	bl	8000f20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	220a      	movs	r2, #10
 8000652:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2201      	movs	r2, #1
 8000658:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000666:	1d39      	adds	r1, r7, #4
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_TIM1_Init+0xf8>)
 800066a:	2200      	movs	r2, #0
 800066c:	0018      	movs	r0, r3
 800066e:	f002 fb31 	bl	8002cd4 <HAL_TIM_IC_ConfigChannel>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8000676:	f000 fc53 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800067a:	1d39      	adds	r1, r7, #4
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_TIM1_Init+0xf8>)
 800067e:	2204      	movs	r2, #4
 8000680:	0018      	movs	r0, r3
 8000682:	f002 fb27 	bl	8002cd4 <HAL_TIM_IC_ConfigChannel>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800068a:	f000 fc49 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800068e:	1d39      	adds	r1, r7, #4
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_TIM1_Init+0xf8>)
 8000692:	2208      	movs	r2, #8
 8000694:	0018      	movs	r0, r3
 8000696:	f002 fb1d 	bl	8002cd4 <HAL_TIM_IC_ConfigChannel>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800069e:	f000 fc3f 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80006a2:	1d39      	adds	r1, r7, #4
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_TIM1_Init+0xf8>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	0018      	movs	r0, r3
 80006aa:	f002 fb13 	bl	8002cd4 <HAL_TIM_IC_ConfigChannel>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80006b2:	f000 fc35 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b008      	add	sp, #32
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	20000088 	.word	0x20000088
 80006c4:	40012c00 	.word	0x40012c00
 80006c8:	0000270f 	.word	0x0000270f

080006cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d2:	2314      	movs	r3, #20
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	0018      	movs	r0, r3
 80006d8:	230c      	movs	r3, #12
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f005 fb65 	bl	8005dac <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	0018      	movs	r0, r3
 80006e6:	2310      	movs	r3, #16
 80006e8:	001a      	movs	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	f005 fb5e 	bl	8005dac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f0:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <MX_TIM3_Init+0xec>)
 80006f2:	4a32      	ldr	r2, [pc, #200]	; (80007bc <MX_TIM3_Init+0xf0>)
 80006f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 80006f6:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <MX_TIM3_Init+0xec>)
 80006f8:	2217      	movs	r2, #23
 80006fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fc:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <MX_TIM3_Init+0xec>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_TIM3_Init+0xec>)
 8000704:	4a2e      	ldr	r2, [pc, #184]	; (80007c0 <MX_TIM3_Init+0xf4>)
 8000706:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_TIM3_Init+0xec>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800070e:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <MX_TIM3_Init+0xec>)
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_TIM3_Init+0xec>)
 8000716:	0018      	movs	r0, r3
 8000718:	f002 f858 	bl	80027cc <HAL_TIM_IC_Init>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000720:	f000 fbfe 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000724:	2114      	movs	r1, #20
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000732:	187a      	adds	r2, r7, r1
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_TIM3_Init+0xec>)
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f003 f909 	bl	8003950 <HAL_TIMEx_MasterConfigSynchronization>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000742:	f000 fbed 	bl	8000f20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	220a      	movs	r2, #10
 800074a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2201      	movs	r2, #1
 8000750:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800075e:	1d39      	adds	r1, r7, #4
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_TIM3_Init+0xec>)
 8000762:	2200      	movs	r2, #0
 8000764:	0018      	movs	r0, r3
 8000766:	f002 fab5 	bl	8002cd4 <HAL_TIM_IC_ConfigChannel>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800076e:	f000 fbd7 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000772:	1d39      	adds	r1, r7, #4
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_TIM3_Init+0xec>)
 8000776:	2204      	movs	r2, #4
 8000778:	0018      	movs	r0, r3
 800077a:	f002 faab 	bl	8002cd4 <HAL_TIM_IC_ConfigChannel>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000782:	f000 fbcd 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000786:	1d39      	adds	r1, r7, #4
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_TIM3_Init+0xec>)
 800078a:	2208      	movs	r2, #8
 800078c:	0018      	movs	r0, r3
 800078e:	f002 faa1 	bl	8002cd4 <HAL_TIM_IC_ConfigChannel>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8000796:	f000 fbc3 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800079a:	1d39      	adds	r1, r7, #4
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_TIM3_Init+0xec>)
 800079e:	220c      	movs	r2, #12
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 fa97 	bl	8002cd4 <HAL_TIM_IC_ConfigChannel>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80007aa:	f000 fbb9 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b008      	add	sp, #32
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	200000d4 	.word	0x200000d4
 80007bc:	40000400 	.word	0x40000400
 80007c0:	0000270f 	.word	0x0000270f

080007c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ca:	2334      	movs	r3, #52	; 0x34
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	0018      	movs	r0, r3
 80007d0:	231c      	movs	r3, #28
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f005 fae9 	bl	8005dac <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007da:	003b      	movs	r3, r7
 80007dc:	0018      	movs	r0, r3
 80007de:	2334      	movs	r3, #52	; 0x34
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f005 fae2 	bl	8005dac <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_TIM16_Init+0x104>)
 80007ea:	4a38      	ldr	r2, [pc, #224]	; (80008cc <MX_TIM16_Init+0x108>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <MX_TIM16_Init+0x104>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_TIM16_Init+0x104>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4095;
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_TIM16_Init+0x104>)
 80007fc:	4a34      	ldr	r2, [pc, #208]	; (80008d0 <MX_TIM16_Init+0x10c>)
 80007fe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_TIM16_Init+0x104>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_TIM16_Init+0x104>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_TIM16_Init+0x104>)
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_TIM16_Init+0x104>)
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fe49 	bl	80024ac <HAL_TIM_Base_Init>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800081e:	f000 fb7f 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_TIM16_Init+0x104>)
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fe99 	bl	800255c <HAL_TIM_PWM_Init>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fb77 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000832:	2134      	movs	r1, #52	; 0x34
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2260      	movs	r2, #96	; 0x60
 8000838:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085e:	1879      	adds	r1, r7, r1
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_TIM16_Init+0x104>)
 8000862:	2200      	movs	r2, #0
 8000864:	0018      	movs	r0, r3
 8000866:	f002 fad9 	bl	8002e1c <HAL_TIM_PWM_ConfigChannel>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800086e:	f000 fb57 	bl	8000f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000872:	003b      	movs	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000878:	003b      	movs	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800087e:	003b      	movs	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000884:	003b      	movs	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800088a:	003b      	movs	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000890:	003b      	movs	r3, r7
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	0192      	lsls	r2, r2, #6
 8000896:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000898:	003b      	movs	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800089e:	003b      	movs	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80008a4:	003a      	movs	r2, r7
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_TIM16_Init+0x104>)
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f003 f8b2 	bl	8003a14 <HAL_TIMEx_ConfigBreakDeadTime>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 80008b4:	f000 fb34 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <MX_TIM16_Init+0x104>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fc8e 	bl	80011dc <HAL_TIM_MspPostInit>

}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b014      	add	sp, #80	; 0x50
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000120 	.word	0x20000120
 80008cc:	40014400 	.word	0x40014400
 80008d0:	00000fff 	.word	0x00000fff

080008d4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008da:	2334      	movs	r3, #52	; 0x34
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	0018      	movs	r0, r3
 80008e0:	231c      	movs	r3, #28
 80008e2:	001a      	movs	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	f005 fa61 	bl	8005dac <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ea:	003b      	movs	r3, r7
 80008ec:	0018      	movs	r0, r3
 80008ee:	2334      	movs	r3, #52	; 0x34
 80008f0:	001a      	movs	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f005 fa5a 	bl	8005dac <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <MX_TIM17_Init+0x104>)
 80008fa:	4a38      	ldr	r2, [pc, #224]	; (80009dc <MX_TIM17_Init+0x108>)
 80008fc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80008fe:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <MX_TIM17_Init+0x104>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <MX_TIM17_Init+0x104>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4095;
 800090a:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <MX_TIM17_Init+0x104>)
 800090c:	4a34      	ldr	r2, [pc, #208]	; (80009e0 <MX_TIM17_Init+0x10c>)
 800090e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <MX_TIM17_Init+0x104>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <MX_TIM17_Init+0x104>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <MX_TIM17_Init+0x104>)
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_TIM17_Init+0x104>)
 8000924:	0018      	movs	r0, r3
 8000926:	f001 fdc1 	bl	80024ac <HAL_TIM_Base_Init>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800092e:	f000 faf7 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_TIM17_Init+0x104>)
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fe11 	bl	800255c <HAL_TIM_PWM_Init>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 faef 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000942:	2134      	movs	r1, #52	; 0x34
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2260      	movs	r2, #96	; 0x60
 8000948:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096e:	1879      	adds	r1, r7, r1
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_TIM17_Init+0x104>)
 8000972:	2200      	movs	r2, #0
 8000974:	0018      	movs	r0, r3
 8000976:	f002 fa51 	bl	8002e1c <HAL_TIM_PWM_ConfigChannel>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800097e:	f000 facf 	bl	8000f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000982:	003b      	movs	r3, r7
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000988:	003b      	movs	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800098e:	003b      	movs	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000994:	003b      	movs	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099a:	003b      	movs	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009a0:	003b      	movs	r3, r7
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	0192      	lsls	r2, r2, #6
 80009a6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009a8:	003b      	movs	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ae:	003b      	movs	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80009b4:	003a      	movs	r2, r7
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_TIM17_Init+0x104>)
 80009b8:	0011      	movs	r1, r2
 80009ba:	0018      	movs	r0, r3
 80009bc:	f003 f82a 	bl	8003a14 <HAL_TIMEx_ConfigBreakDeadTime>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80009c4:	f000 faac 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <MX_TIM17_Init+0x104>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fc06 	bl	80011dc <HAL_TIM_MspPostInit>

}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b014      	add	sp, #80	; 0x50
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000016c 	.word	0x2000016c
 80009dc:	40014800 	.word	0x40014800
 80009e0:	00000fff 	.word	0x00000fff

080009e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 80009ea:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <MX_USART1_UART_Init+0x98>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 80009f0:	22e1      	movs	r2, #225	; 0xe1
 80009f2:	0212      	lsls	r2, r2, #8
 80009f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f003 f904 	bl	8003c3c <HAL_HalfDuplex_Init>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a38:	f000 fa72 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	0018      	movs	r0, r3
 8000a42:	f004 fff1 	bl	8005a28 <HAL_UARTEx_SetTxFifoThreshold>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4a:	f000 fa69 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a50:	2100      	movs	r1, #0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f005 f828 	bl	8005aa8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a5c:	f000 fa60 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <MX_USART1_UART_Init+0x94>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 ffa6 	bl	80059b4 <HAL_UARTEx_DisableFifoMode>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a6c:	f000 fa58 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200001b8 	.word	0x200001b8
 8000a7c:	40013800 	.word	0x40013800

08000a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <MX_USART2_UART_Init+0x64>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000a8c:	22e1      	movs	r2, #225	; 0xe1
 8000a8e:	0252      	lsls	r2, r2, #9
 8000a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <MX_USART2_UART_Init+0x60>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f003 f860 	bl	8003b90 <HAL_UART_Init>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 fa24 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	2000024c 	.word	0x2000024c
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_GPIO_Init+0x58>)
 8000af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_GPIO_Init+0x58>)
 8000af4:	2102      	movs	r1, #2
 8000af6:	430a      	orrs	r2, r1
 8000af8:	635a      	str	r2, [r3, #52]	; 0x34
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_GPIO_Init+0x58>)
 8000afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afe:	2202      	movs	r2, #2
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_GPIO_Init+0x58>)
 8000b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <MX_GPIO_Init+0x58>)
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_GPIO_Init+0x58>)
 8000b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b16:	2204      	movs	r2, #4
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_GPIO_Init+0x58>)
 8000b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_GPIO_Init+0x58>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	430a      	orrs	r2, r1
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <MX_GPIO_Init+0x58>)
 8000b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4013      	ands	r3, r2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40021000 	.word	0x40021000

08000b44 <abc>:

/* USER CODE BEGIN 4 */
void abc(uint8_t i, uint16_t x)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	1c0a      	adds	r2, r1, #0
 8000b54:	801a      	strh	r2, [r3, #0]
  s[i]++;
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	4a2e      	ldr	r2, [pc, #184]	; (8000c14 <abc+0xd0>)
 8000b5c:	5cd2      	ldrb	r2, [r2, r3]
 8000b5e:	3201      	adds	r2, #1
 8000b60:	b2d1      	uxtb	r1, r2
 8000b62:	4a2c      	ldr	r2, [pc, #176]	; (8000c14 <abc+0xd0>)
 8000b64:	54d1      	strb	r1, [r2, r3]
  s[i]=s[i]%2;
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	4a2a      	ldr	r2, [pc, #168]	; (8000c14 <abc+0xd0>)
 8000b6c:	5cd2      	ldrb	r2, [r2, r3]
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2101      	movs	r1, #1
 8000b74:	400a      	ands	r2, r1
 8000b76:	b2d1      	uxtb	r1, r2
 8000b78:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <abc+0xd0>)
 8000b7a:	54d1      	strb	r1, [r2, r3]
  if(s[i]==0)
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4a24      	ldr	r2, [pc, #144]	; (8000c14 <abc+0xd0>)
 8000b82:	5cd3      	ldrb	r3, [r2, r3]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d13a      	bne.n	8000bfe <abc+0xba>
  {
    n[i]=x;
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <abc+0xd4>)
 8000b8e:	0052      	lsls	r2, r2, #1
 8000b90:	1d39      	adds	r1, r7, #4
 8000b92:	8809      	ldrh	r1, [r1, #0]
 8000b94:	52d1      	strh	r1, [r2, r3]
    if(n[i]>u[i])
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <abc+0xd4>)
 8000b9c:	0052      	lsls	r2, r2, #1
 8000b9e:	5ad2      	ldrh	r2, [r2, r3]
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	7819      	ldrb	r1, [r3, #0]
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <abc+0xd8>)
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	5acb      	ldrh	r3, [r1, r3]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d911      	bls.n	8000bd2 <abc+0x8e>
    {
      pwm_vals[i]= n[i]-u[i];
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <abc+0xd4>)
 8000bb4:	0052      	lsls	r2, r2, #1
 8000bb6:	5ad1      	ldrh	r1, [r2, r3]
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <abc+0xd8>)
 8000bbe:	0052      	lsls	r2, r2, #1
 8000bc0:	5ad3      	ldrh	r3, [r2, r3]
 8000bc2:	1dfa      	adds	r2, r7, #7
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	1acb      	subs	r3, r1, r3
 8000bc8:	b299      	uxth	r1, r3
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <abc+0xdc>)
 8000bcc:	0052      	lsls	r2, r2, #1
 8000bce:	52d1      	strh	r1, [r2, r3]
  }
  else
  {
    u[i]=x;
  }
}
 8000bd0:	e01c      	b.n	8000c0c <abc+0xc8>
      pwm_vals[i]=(10000-u[i])+n[i];
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <abc+0xd4>)
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	5ad2      	ldrh	r2, [r2, r3]
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	7819      	ldrb	r1, [r3, #0]
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <abc+0xd8>)
 8000be2:	0049      	lsls	r1, r1, #1
 8000be4:	5acb      	ldrh	r3, [r1, r3]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	1dfa      	adds	r2, r7, #7
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	490d      	ldr	r1, [pc, #52]	; (8000c24 <abc+0xe0>)
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	4463      	add	r3, ip
 8000bf4:	b299      	uxth	r1, r3
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <abc+0xdc>)
 8000bf8:	0052      	lsls	r2, r2, #1
 8000bfa:	52d1      	strh	r1, [r2, r3]
}
 8000bfc:	e006      	b.n	8000c0c <abc+0xc8>
    u[i]=x;
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <abc+0xd8>)
 8000c04:	0052      	lsls	r2, r2, #1
 8000c06:	1d39      	adds	r1, r7, #4
 8000c08:	8809      	ldrh	r1, [r1, #0]
 8000c0a:	52d1      	strh	r1, [r2, r3]
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b002      	add	sp, #8
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000032c 	.word	0x2000032c
 8000c18:	2000030c 	.word	0x2000030c
 8000c1c:	2000031c 	.word	0x2000031c
 8000c20:	20000000 	.word	0x20000000
 8000c24:	00002710 	.word	0x00002710

08000c28 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(htim == &htim1){
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	4b59      	ldr	r3, [pc, #356]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d153      	bne.n	8000ce0 <HAL_TIM_IC_CaptureCallback+0xb8>
    if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7f1b      	ldrb	r3, [r3, #28]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d110      	bne.n	8000c62 <HAL_TIM_IC_CaptureCallback+0x3a>
      abc(3,HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1)); //ESC4
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2100      	movs	r1, #0
 8000c44:	0018      	movs	r0, r3
 8000c46:	f002 f9e9 	bl	800301c <HAL_TIM_ReadCapturedValue>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	0019      	movs	r1, r3
 8000c50:	2003      	movs	r0, #3
 8000c52:	f7ff ff77 	bl	8000b44 <abc>
      HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c56:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 fe0e 	bl	800287c <HAL_TIM_IC_Start_IT>
    else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
      abc(7,HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4)); //ESC8
      HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
    }
  }
}
 8000c60:	e095      	b.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x166>
    else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7f1b      	ldrb	r3, [r3, #28]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d110      	bne.n	8000c8c <HAL_TIM_IC_CaptureCallback+0x64>
      abc(4,HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)); //ESC5
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f002 f9d4 	bl	800301c <HAL_TIM_ReadCapturedValue>
 8000c74:	0003      	movs	r3, r0
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	0019      	movs	r1, r3
 8000c7a:	2004      	movs	r0, #4
 8000c7c:	f7ff ff62 	bl	8000b44 <abc>
      HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000c80:	4b45      	ldr	r3, [pc, #276]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000c82:	2104      	movs	r1, #4
 8000c84:	0018      	movs	r0, r3
 8000c86:	f001 fdf9 	bl	800287c <HAL_TIM_IC_Start_IT>
}
 8000c8a:	e080      	b.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x166>
    else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7f1b      	ldrb	r3, [r3, #28]
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d110      	bne.n	8000cb6 <HAL_TIM_IC_CaptureCallback+0x8e>
      abc(5,HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3)); //ESC6
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2108      	movs	r1, #8
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f002 f9bf 	bl	800301c <HAL_TIM_ReadCapturedValue>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	0019      	movs	r1, r3
 8000ca4:	2005      	movs	r0, #5
 8000ca6:	f7ff ff4d 	bl	8000b44 <abc>
      HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000cac:	2108      	movs	r1, #8
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f001 fde4 	bl	800287c <HAL_TIM_IC_Start_IT>
}
 8000cb4:	e06b      	b.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x166>
    else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7f1b      	ldrb	r3, [r3, #28]
 8000cba:	2b08      	cmp	r3, #8
 8000cbc:	d167      	bne.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x166>
      abc(6,HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4)); //ESC7
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	210c      	movs	r1, #12
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f002 f9aa 	bl	800301c <HAL_TIM_ReadCapturedValue>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	0019      	movs	r1, r3
 8000cce:	2006      	movs	r0, #6
 8000cd0:	f7ff ff38 	bl	8000b44 <abc>
      HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000cd4:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000cd6:	210c      	movs	r1, #12
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f001 fdcf 	bl	800287c <HAL_TIM_IC_Start_IT>
}
 8000cde:	e056      	b.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x166>
  else if(htim == &htim3){
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d152      	bne.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x166>
    if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7f1b      	ldrb	r3, [r3, #28]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d110      	bne.n	8000d12 <HAL_TIM_IC_CaptureCallback+0xea>
      abc(0,HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1)); //ESC1
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f002 f991 	bl	800301c <HAL_TIM_ReadCapturedValue>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	0019      	movs	r1, r3
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff1f 	bl	8000b44 <abc>
      HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f001 fdb6 	bl	800287c <HAL_TIM_IC_Start_IT>
}
 8000d10:	e03d      	b.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x166>
    else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7f1b      	ldrb	r3, [r3, #28]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d110      	bne.n	8000d3c <HAL_TIM_IC_CaptureCallback+0x114>
      abc(1,HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)); //ESC2
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 f97c 	bl	800301c <HAL_TIM_ReadCapturedValue>
 8000d24:	0003      	movs	r3, r0
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	0019      	movs	r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff0a 	bl	8000b44 <abc>
      HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000d32:	2104      	movs	r1, #4
 8000d34:	0018      	movs	r0, r3
 8000d36:	f001 fda1 	bl	800287c <HAL_TIM_IC_Start_IT>
}
 8000d3a:	e028      	b.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x166>
    else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7f1b      	ldrb	r3, [r3, #28]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d110      	bne.n	8000d66 <HAL_TIM_IC_CaptureCallback+0x13e>
      abc(2,HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3)); //ESC3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2108      	movs	r1, #8
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f002 f967 	bl	800301c <HAL_TIM_ReadCapturedValue>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	0019      	movs	r1, r3
 8000d54:	2002      	movs	r0, #2
 8000d56:	f7ff fef5 	bl	8000b44 <abc>
      HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f001 fd8c 	bl	800287c <HAL_TIM_IC_Start_IT>
}
 8000d64:	e013      	b.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x166>
    else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7f1b      	ldrb	r3, [r3, #28]
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	d10f      	bne.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x166>
      abc(7,HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4)); //ESC8
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	210c      	movs	r1, #12
 8000d72:	0018      	movs	r0, r3
 8000d74:	f002 f952 	bl	800301c <HAL_TIM_ReadCapturedValue>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f7ff fee0 	bl	8000b44 <abc>
      HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000d86:	210c      	movs	r1, #12
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f001 fd77 	bl	800287c <HAL_TIM_IC_Start_IT>
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	20000088 	.word	0x20000088
 8000d9c:	200000d4 	.word	0x200000d4

08000da0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint8_t i;
  if(uart_incoming == '['){
 8000da8:	4b57      	ldr	r3, [pc, #348]	; (8000f08 <HAL_UART_RxCpltCallback+0x168>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b5b      	cmp	r3, #91	; 0x5b
 8000dae:	d118      	bne.n	8000de2 <HAL_UART_RxCpltCallback+0x42>
    for(i=0; i<8; i++){
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e00a      	b.n	8000dd0 <HAL_UART_RxCpltCallback+0x30>
      msg[i] = 0;
 8000dba:	200f      	movs	r0, #15
 8000dbc:	183b      	adds	r3, r7, r0
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4a52      	ldr	r2, [pc, #328]	; (8000f0c <HAL_UART_RxCpltCallback+0x16c>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	54d1      	strb	r1, [r2, r3]
    for(i=0; i<8; i++){
 8000dc6:	183b      	adds	r3, r7, r0
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	183b      	adds	r3, r7, r0
 8000dcc:	3201      	adds	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b07      	cmp	r3, #7
 8000dd8:	d9ef      	bls.n	8000dba <HAL_UART_RxCpltCallback+0x1a>
    }
    msg[0] = '[';
 8000dda:	4b4c      	ldr	r3, [pc, #304]	; (8000f0c <HAL_UART_RxCpltCallback+0x16c>)
 8000ddc:	225b      	movs	r2, #91	; 0x5b
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e087      	b.n	8000ef2 <HAL_UART_RxCpltCallback+0x152>
  }
  else if(uart_incoming == ']')
 8000de2:	4b49      	ldr	r3, [pc, #292]	; (8000f08 <HAL_UART_RxCpltCallback+0x168>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b5d      	cmp	r3, #93	; 0x5d
 8000de8:	d164      	bne.n	8000eb4 <HAL_UART_RxCpltCallback+0x114>
  {
    msg[7] = ']';
 8000dea:	4b48      	ldr	r3, [pc, #288]	; (8000f0c <HAL_UART_RxCpltCallback+0x16c>)
 8000dec:	225d      	movs	r2, #93	; 0x5d
 8000dee:	71da      	strb	r2, [r3, #7]
    if(!(msg[0]=='[' && msg[7]==']')) return;
 8000df0:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <HAL_UART_RxCpltCallback+0x16c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b5b      	cmp	r3, #91	; 0x5b
 8000df6:	d000      	beq.n	8000dfa <HAL_UART_RxCpltCallback+0x5a>
 8000df8:	e082      	b.n	8000f00 <HAL_UART_RxCpltCallback+0x160>
 8000dfa:	4b44      	ldr	r3, [pc, #272]	; (8000f0c <HAL_UART_RxCpltCallback+0x16c>)
 8000dfc:	79db      	ldrb	r3, [r3, #7]
 8000dfe:	2b5d      	cmp	r3, #93	; 0x5d
 8000e00:	d000      	beq.n	8000e04 <HAL_UART_RxCpltCallback+0x64>
 8000e02:	e07d      	b.n	8000f00 <HAL_UART_RxCpltCallback+0x160>
    uint8_t temp_str[4];
    for(i=0;i<3;i++){
 8000e04:	230f      	movs	r3, #15
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e00f      	b.n	8000e2e <HAL_UART_RxCpltCallback+0x8e>
      temp_str[i] = msg[i+1];
 8000e0e:	200f      	movs	r0, #15
 8000e10:	183b      	adds	r3, r7, r0
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	183b      	adds	r3, r7, r0
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	493c      	ldr	r1, [pc, #240]	; (8000f0c <HAL_UART_RxCpltCallback+0x16c>)
 8000e1c:	5c89      	ldrb	r1, [r1, r2]
 8000e1e:	2208      	movs	r2, #8
 8000e20:	18ba      	adds	r2, r7, r2
 8000e22:	54d1      	strb	r1, [r2, r3]
    for(i=0;i<3;i++){
 8000e24:	183b      	adds	r3, r7, r0
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	183b      	adds	r3, r7, r0
 8000e2a:	3201      	adds	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	240f      	movs	r4, #15
 8000e30:	193b      	adds	r3, r7, r4
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d9ea      	bls.n	8000e0e <HAL_UART_RxCpltCallback+0x6e>
    }
    temp_str[3] = 0;
 8000e38:	2108      	movs	r1, #8
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	70da      	strb	r2, [r3, #3]
    adc_vals[0] = strtol(temp_str, NULL, 16);
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2210      	movs	r2, #16
 8000e44:	2100      	movs	r1, #0
 8000e46:	0018      	movs	r0, r3
 8000e48:	f004 ff70 	bl	8005d2c <strtol>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <HAL_UART_RxCpltCallback+0x170>)
 8000e52:	801a      	strh	r2, [r3, #0]
    for(i=0;i<3;i++){
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e00f      	b.n	8000e7c <HAL_UART_RxCpltCallback+0xdc>
      temp_str[i] = msg[i+4];
 8000e5c:	200f      	movs	r0, #15
 8000e5e:	183b      	adds	r3, r7, r0
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	1d1a      	adds	r2, r3, #4
 8000e64:	183b      	adds	r3, r7, r0
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4928      	ldr	r1, [pc, #160]	; (8000f0c <HAL_UART_RxCpltCallback+0x16c>)
 8000e6a:	5c89      	ldrb	r1, [r1, r2]
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	18ba      	adds	r2, r7, r2
 8000e70:	54d1      	strb	r1, [r2, r3]
    for(i=0;i<3;i++){
 8000e72:	183b      	adds	r3, r7, r0
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	183b      	adds	r3, r7, r0
 8000e78:	3201      	adds	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d9ea      	bls.n	8000e5c <HAL_UART_RxCpltCallback+0xbc>
    }
    temp_str[3] = 0;
 8000e86:	2108      	movs	r1, #8
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	70da      	strb	r2, [r3, #3]
    adc_vals[1] = strtol(temp_str, NULL, 16);
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2210      	movs	r2, #16
 8000e92:	2100      	movs	r1, #0
 8000e94:	0018      	movs	r0, r3
 8000e96:	f004 ff49 	bl	8005d2c <strtol>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_UART_RxCpltCallback+0x170>)
 8000ea0:	805a      	strh	r2, [r3, #2]
    TIM16 -> CCR1 = adc_vals[0];
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_UART_RxCpltCallback+0x170>)
 8000ea4:	881a      	ldrh	r2, [r3, #0]
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_UART_RxCpltCallback+0x174>)
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
    TIM17 -> CCR2 = adc_vals[1];
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_RxCpltCallback+0x170>)
 8000eac:	885a      	ldrh	r2, [r3, #2]
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_UART_RxCpltCallback+0x178>)
 8000eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8000eb2:	e01e      	b.n	8000ef2 <HAL_UART_RxCpltCallback+0x152>
  }
  else {
    for(i=7; i>=0; i--){
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	2207      	movs	r2, #7
 8000eba:	701a      	strb	r2, [r3, #0]
      if(msg[i] == 0) continue;
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <HAL_UART_RxCpltCallback+0x16c>)
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d106      	bne.n	8000ed8 <HAL_UART_RxCpltCallback+0x138>
 8000eca:	46c0      	nop			; (mov r8, r8)
    for(i=7; i>=0; i--){
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	3a01      	subs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
      if(msg[i] == 0) continue;
 8000ed6:	e7f1      	b.n	8000ebc <HAL_UART_RxCpltCallback+0x11c>
      else break;
 8000ed8:	46c0      	nop			; (mov r8, r8)
    }
    i++;
 8000eda:	210f      	movs	r1, #15
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	3201      	adds	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
    msg[i] = uart_incoming;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_UART_RxCpltCallback+0x168>)
 8000eec:	7811      	ldrb	r1, [r2, #0]
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_UART_RxCpltCallback+0x16c>)
 8000ef0:	54d1      	strb	r1, [r2, r3]
  }
  HAL_UART_Receive_IT(&huart1, &uart_incoming, 1);
 8000ef2:	4905      	ldr	r1, [pc, #20]	; (8000f08 <HAL_UART_RxCpltCallback+0x168>)
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_UART_RxCpltCallback+0x17c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f002 ffa1 	bl	8003e40 <HAL_UART_Receive_IT>
 8000efe:	e000      	b.n	8000f02 <HAL_UART_RxCpltCallback+0x162>
    if(!(msg[0]=='[' && msg[7]==']')) return;
 8000f00:	46c0      	nop			; (mov r8, r8)
}
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b005      	add	sp, #20
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	200002e0 	.word	0x200002e0
 8000f0c:	200002e4 	.word	0x200002e4
 8000f10:	200002ec 	.word	0x200002ec
 8000f14:	40014400 	.word	0x40014400
 8000f18:	40014800 	.word	0x40014800
 8000f1c:	200001b8 	.word	0x200001b8

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <Error_Handler+0x8>
	...

08000f2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x44>)
 8000f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_MspInit+0x44>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x44>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	2201      	movs	r2, #1
 8000f44:	4013      	ands	r3, r2
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_MspInit+0x44>)
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	0549      	lsls	r1, r1, #21
 8000f54:	430a      	orrs	r2, r1
 8000f56:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_MspInit+0x44>)
 8000f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	055b      	lsls	r3, r3, #21
 8000f60:	4013      	ands	r3, r2
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b08f      	sub	sp, #60	; 0x3c
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	2424      	movs	r4, #36	; 0x24
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0018      	movs	r0, r3
 8000f82:	2314      	movs	r3, #20
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f004 ff10 	bl	8005dac <memset>
  if(htim_ic->Instance==TIM1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a72      	ldr	r2, [pc, #456]	; (800115c <HAL_TIM_IC_MspInit+0x1e8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d141      	bne.n	800101a <HAL_TIM_IC_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f96:	4b72      	ldr	r3, [pc, #456]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8000f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9a:	4b71      	ldr	r3, [pc, #452]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	0109      	lsls	r1, r1, #4
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa4:	4b6e      	ldr	r3, [pc, #440]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8000fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	4013      	ands	r3, r2
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8000fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb6:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fbe:	4b68      	ldr	r3, [pc, #416]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8000fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
    PA0     ------> TIM1_CH1
    PA1     ------> TIM1_CH2
    PA2     ------> TIM1_CH3
    PA3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fca:	0021      	movs	r1, r4
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	220f      	movs	r2, #15
 8000fd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	187a      	adds	r2, r7, r1
 8000fec:	23a0      	movs	r3, #160	; 0xa0
 8000fee:	05db      	lsls	r3, r3, #23
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 fcb0 	bl	8001958 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	200d      	movs	r0, #13
 8000ffe:	f000 fb9d 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001002:	200d      	movs	r0, #13
 8001004:	f000 fbaf 	bl	8001766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	200e      	movs	r0, #14
 800100e:	f000 fb95 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001012:	200e      	movs	r0, #14
 8001014:	f000 fba7 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001018:	e09b      	b.n	8001152 <HAL_TIM_IC_MspInit+0x1de>
  else if(htim_ic->Instance==TIM3)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a51      	ldr	r2, [pc, #324]	; (8001164 <HAL_TIM_IC_MspInit+0x1f0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d000      	beq.n	8001026 <HAL_TIM_IC_MspInit+0xb2>
 8001024:	e095      	b.n	8001152 <HAL_TIM_IC_MspInit+0x1de>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001026:	4b4e      	ldr	r3, [pc, #312]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8001028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800102a:	4b4d      	ldr	r3, [pc, #308]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 800102c:	2102      	movs	r1, #2
 800102e:	430a      	orrs	r2, r1
 8001030:	63da      	str	r2, [r3, #60]	; 0x3c
 8001032:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8001034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001036:	2202      	movs	r2, #2
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b48      	ldr	r3, [pc, #288]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8001040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001042:	4b47      	ldr	r3, [pc, #284]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8001044:	2102      	movs	r1, #2
 8001046:	430a      	orrs	r2, r1
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
 800104a:	4b45      	ldr	r3, [pc, #276]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 800104c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104e:	2202      	movs	r2, #2
 8001050:	4013      	ands	r3, r2
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b42      	ldr	r3, [pc, #264]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8001058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105a:	4b41      	ldr	r3, [pc, #260]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 800105c:	2104      	movs	r1, #4
 800105e:	430a      	orrs	r2, r1
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
 8001062:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8001064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001066:	2204      	movs	r2, #4
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8001070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <HAL_TIM_IC_MspInit+0x1ec>)
 800107c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107e:	2201      	movs	r2, #1
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001086:	2424      	movs	r4, #36	; 0x24
 8001088:	193b      	adds	r3, r7, r4
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	193b      	adds	r3, r7, r4
 8001090:	2202      	movs	r2, #2
 8001092:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	193b      	adds	r3, r7, r4
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM3;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	220b      	movs	r2, #11
 80010a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <HAL_TIM_IC_MspInit+0x1f4>)
 80010aa:	0019      	movs	r1, r3
 80010ac:	0010      	movs	r0, r2
 80010ae:	f000 fc53 	bl	8001958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010b2:	0021      	movs	r1, r4
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	01d2      	lsls	r2, r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	000c      	movs	r4, r1
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	2202      	movs	r2, #2
 80010c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM3;
 80010d0:	193b      	adds	r3, r7, r4
 80010d2:	220b      	movs	r2, #11
 80010d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	193b      	adds	r3, r7, r4
 80010d8:	4a24      	ldr	r2, [pc, #144]	; (800116c <HAL_TIM_IC_MspInit+0x1f8>)
 80010da:	0019      	movs	r1, r3
 80010dc:	0010      	movs	r0, r2
 80010de:	f000 fc3b 	bl	8001958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010e2:	0021      	movs	r1, r4
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	0212      	lsls	r2, r2, #8
 80010ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	000c      	movs	r4, r1
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	2202      	movs	r2, #2
 80010f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM3;
 8001100:	193b      	adds	r3, r7, r4
 8001102:	2203      	movs	r2, #3
 8001104:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	193b      	adds	r3, r7, r4
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <HAL_TIM_IC_MspInit+0x1f8>)
 800110a:	0019      	movs	r1, r3
 800110c:	0010      	movs	r0, r2
 800110e:	f000 fc23 	bl	8001958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001112:	0021      	movs	r1, r4
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	0052      	lsls	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2202      	movs	r2, #2
 8001120:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM3;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	220c      	movs	r2, #12
 8001132:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	187a      	adds	r2, r7, r1
 8001136:	23a0      	movs	r3, #160	; 0xa0
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f000 fc0b 	bl	8001958 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2010      	movs	r0, #16
 8001148:	f000 faf8 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800114c:	2010      	movs	r0, #16
 800114e:	f000 fb0a 	bl	8001766 <HAL_NVIC_EnableIRQ>
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b00f      	add	sp, #60	; 0x3c
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	40012c00 	.word	0x40012c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40000400 	.word	0x40000400
 8001168:	50000400 	.word	0x50000400
 800116c:	50000800 	.word	0x50000800

08001170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_TIM_Base_MspInit+0x60>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10e      	bne.n	80011a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_TIM_Base_MspInit+0x64>)
 8001184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_TIM_Base_MspInit+0x64>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	0289      	lsls	r1, r1, #10
 800118c:	430a      	orrs	r2, r1
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_TIM_Base_MspInit+0x64>)
 8001192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	029b      	lsls	r3, r3, #10
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800119e:	e012      	b.n	80011c6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <HAL_TIM_Base_MspInit+0x68>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10d      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_TIM_Base_MspInit+0x64>)
 80011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_TIM_Base_MspInit+0x64>)
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	02c9      	lsls	r1, r1, #11
 80011b4:	430a      	orrs	r2, r1
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_TIM_Base_MspInit+0x64>)
 80011ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	02db      	lsls	r3, r3, #11
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b004      	add	sp, #16
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	40014400 	.word	0x40014400
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40014800 	.word	0x40014800

080011dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b08b      	sub	sp, #44	; 0x2c
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	2414      	movs	r4, #20
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	0018      	movs	r0, r3
 80011ea:	2314      	movs	r3, #20
 80011ec:	001a      	movs	r2, r3
 80011ee:	2100      	movs	r1, #0
 80011f0:	f004 fddc 	bl	8005dac <memset>
  if(htim->Instance==TIM16)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a29      	ldr	r2, [pc, #164]	; (80012a0 <HAL_TIM_MspPostInit+0xc4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d123      	bne.n	8001246 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <HAL_TIM_MspPostInit+0xc8>)
 8001200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <HAL_TIM_MspPostInit+0xc8>)
 8001204:	2101      	movs	r1, #1
 8001206:	430a      	orrs	r2, r1
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_TIM_MspPostInit+0xc8>)
 800120c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120e:	2201      	movs	r2, #1
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001216:	0021      	movs	r1, r4
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2240      	movs	r2, #64	; 0x40
 800121c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2202      	movs	r2, #2
 8001222:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2205      	movs	r2, #5
 8001234:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	187a      	adds	r2, r7, r1
 8001238:	23a0      	movs	r3, #160	; 0xa0
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	0011      	movs	r1, r2
 800123e:	0018      	movs	r0, r3
 8001240:	f000 fb8a 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001244:	e027      	b.n	8001296 <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM17)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_TIM_MspPostInit+0xcc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d122      	bne.n	8001296 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_TIM_MspPostInit+0xc8>)
 8001252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_TIM_MspPostInit+0xc8>)
 8001256:	2101      	movs	r1, #1
 8001258:	430a      	orrs	r2, r1
 800125a:	635a      	str	r2, [r3, #52]	; 0x34
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_TIM_MspPostInit+0xc8>)
 800125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001260:	2201      	movs	r2, #1
 8001262:	4013      	ands	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001268:	2114      	movs	r1, #20
 800126a:	187b      	adds	r3, r7, r1
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2202      	movs	r2, #2
 8001274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2205      	movs	r2, #5
 8001286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	187a      	adds	r2, r7, r1
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	0011      	movs	r1, r2
 8001290:	0018      	movs	r0, r3
 8001292:	f000 fb61 	bl	8001958 <HAL_GPIO_Init>
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b00b      	add	sp, #44	; 0x2c
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40014400 	.word	0x40014400
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40014800 	.word	0x40014800

080012ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b093      	sub	sp, #76	; 0x4c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	2334      	movs	r3, #52	; 0x34
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	0018      	movs	r0, r3
 80012ba:	2314      	movs	r3, #20
 80012bc:	001a      	movs	r2, r3
 80012be:	2100      	movs	r1, #0
 80012c0:	f004 fd74 	bl	8005dac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	2418      	movs	r4, #24
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	0018      	movs	r0, r3
 80012ca:	231c      	movs	r3, #28
 80012cc:	001a      	movs	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f004 fd6c 	bl	8005dac <memset>
  if(huart->Instance==USART1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a41      	ldr	r2, [pc, #260]	; (80013e0 <HAL_UART_MspInit+0x134>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d13e      	bne.n	800135c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 ffef 	bl	80022d0 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d001      	beq.n	80012fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012f6:	f7ff fe13 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <HAL_UART_MspInit+0x138>)
 80012fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012fe:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <HAL_UART_MspInit+0x138>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	01c9      	lsls	r1, r1, #7
 8001304:	430a      	orrs	r2, r1
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <HAL_UART_MspInit+0x138>)
 800130a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	01db      	lsls	r3, r3, #7
 8001310:	4013      	ands	r3, r2
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <HAL_UART_MspInit+0x138>)
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <HAL_UART_MspInit+0x138>)
 800131c:	2102      	movs	r1, #2
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_UART_MspInit+0x138>)
 8001324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001326:	2202      	movs	r2, #2
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800132e:	2134      	movs	r1, #52	; 0x34
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2240      	movs	r2, #64	; 0x40
 8001334:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2212      	movs	r2, #18
 800133a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2201      	movs	r2, #1
 8001340:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	187b      	adds	r3, r7, r1
 8001350:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <HAL_UART_MspInit+0x13c>)
 8001352:	0019      	movs	r1, r3
 8001354:	0010      	movs	r0, r2
 8001356:	f000 faff 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135a:	e03d      	b.n	80013d8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <HAL_UART_MspInit+0x140>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d138      	bne.n	80013d8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_UART_MspInit+0x138>)
 8001368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <HAL_UART_MspInit+0x138>)
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	0289      	lsls	r1, r1, #10
 8001370:	430a      	orrs	r2, r1
 8001372:	63da      	str	r2, [r3, #60]	; 0x3c
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_UART_MspInit+0x138>)
 8001376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	029b      	lsls	r3, r3, #10
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_UART_MspInit+0x138>)
 8001384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_UART_MspInit+0x138>)
 8001388:	2101      	movs	r1, #1
 800138a:	430a      	orrs	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_UART_MspInit+0x138>)
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001392:	2201      	movs	r2, #1
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800139a:	2134      	movs	r1, #52	; 0x34
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2230      	movs	r2, #48	; 0x30
 80013a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2202      	movs	r2, #2
 80013a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2201      	movs	r2, #1
 80013b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	187a      	adds	r2, r7, r1
 80013bc:	23a0      	movs	r3, #160	; 0xa0
 80013be:	05db      	lsls	r3, r3, #23
 80013c0:	0011      	movs	r1, r2
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 fac8 	bl	8001958 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	201c      	movs	r0, #28
 80013ce:	f000 f9b5 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013d2:	201c      	movs	r0, #28
 80013d4:	f000 f9c7 	bl	8001766 <HAL_NVIC_EnableIRQ>
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b013      	add	sp, #76	; 0x4c
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40021000 	.word	0x40021000
 80013e8:	50000400 	.word	0x50000400
 80013ec:	40004400 	.word	0x40004400

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f8ca 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001426:	0018      	movs	r0, r3
 8001428:	f001 fb52 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	20000088 	.word	0x20000088

08001438 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <TIM1_CC_IRQHandler+0x14>)
 800143e:	0018      	movs	r0, r3
 8001440:	f001 fb46 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	20000088 	.word	0x20000088

08001450 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <TIM3_IRQHandler+0x14>)
 8001456:	0018      	movs	r0, r3
 8001458:	f001 fb3a 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	200000d4 	.word	0x200000d4

08001468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <USART2_IRQHandler+0x14>)
 800146e:	0018      	movs	r0, r3
 8001470:	f002 fd3e 	bl	8003ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	2000024c 	.word	0x2000024c

08001480 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <SystemInit+0x14>)
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	0512      	lsls	r2, r2, #20
 800148a:	609a      	str	r2, [r3, #8]
#endif
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800149a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800149c:	f7ff fff0 	bl	8001480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014a2:	e003      	b.n	80014ac <LoopCopyDataInit>

080014a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80014a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014aa:	3104      	adds	r1, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014ac:	480a      	ldr	r0, [pc, #40]	; (80014d8 <LoopForever+0xa>)
  ldr r3, =_edata
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <LoopForever+0xe>)
  adds r2, r0, r1
 80014b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014b4:	d3f6      	bcc.n	80014a4 <CopyDataInit>
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <LoopForever+0x12>)
  b LoopFillZerobss
 80014b8:	e002      	b.n	80014c0 <LoopFillZerobss>

080014ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  str  r3, [r2]
 80014bc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014be:	3204      	adds	r2, #4

080014c0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <LoopForever+0x16>)
  cmp r2, r3
 80014c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014c4:	d3f9      	bcc.n	80014ba <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80014c6:	f004 fc7f 	bl	8005dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ca:	f7fe ff93 	bl	80003f4 <main>

080014ce <LoopForever>:

LoopForever:
    b LoopForever
 80014ce:	e7fe      	b.n	80014ce <LoopForever>
  ldr   r0, =_estack
 80014d0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80014d4:	08006048 	.word	0x08006048
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014dc:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 80014e0:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 80014e4:	20000470 	.word	0x20000470

080014e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_IRQHandler>

080014ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f6:	2003      	movs	r0, #3
 80014f8:	f000 f80e 	bl	8001518 <HAL_InitTick>
 80014fc:	1e03      	subs	r3, r0, #0
 80014fe:	d003      	beq.n	8001508 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e001      	b.n	800150c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001508:	f7ff fd10 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800150c:	1dfb      	adds	r3, r7, #7
 800150e:	781b      	ldrb	r3, [r3, #0]
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	230f      	movs	r3, #15
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_InitTick+0x88>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d02b      	beq.n	8001588 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_InitTick+0x8c>)
 8001532:	681c      	ldr	r4, [r3, #0]
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_InitTick+0x88>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	0019      	movs	r1, r3
 800153a:	23fa      	movs	r3, #250	; 0xfa
 800153c:	0098      	lsls	r0, r3, #2
 800153e:	f7fe fde3 	bl	8000108 <__udivsi3>
 8001542:	0003      	movs	r3, r0
 8001544:	0019      	movs	r1, r3
 8001546:	0020      	movs	r0, r4
 8001548:	f7fe fdde 	bl	8000108 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	0018      	movs	r0, r3
 8001550:	f000 f919 	bl	8001786 <HAL_SYSTICK_Config>
 8001554:	1e03      	subs	r3, r0, #0
 8001556:	d112      	bne.n	800157e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d80a      	bhi.n	8001574 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	2301      	movs	r3, #1
 8001562:	425b      	negs	r3, r3
 8001564:	2200      	movs	r2, #0
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f8e8 	bl	800173c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_InitTick+0x90>)
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e00d      	b.n	8001590 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001574:	230f      	movs	r3, #15
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e008      	b.n	8001590 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800157e:	230f      	movs	r3, #15
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e003      	b.n	8001590 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001588:	230f      	movs	r3, #15
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001590:	230f      	movs	r3, #15
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	781b      	ldrb	r3, [r3, #0]
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b005      	add	sp, #20
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	20000018 	.word	0x20000018
 80015a4:	20000010 	.word	0x20000010
 80015a8:	20000014 	.word	0x20000014

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_IncTick+0x1c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	001a      	movs	r2, r3
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_IncTick+0x20>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	18d2      	adds	r2, r2, r3
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_IncTick+0x20>)
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000018 	.word	0x20000018
 80015cc:	20000334 	.word	0x20000334

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <HAL_GetTick+0x10>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	20000334 	.word	0x20000334

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	0002      	movs	r2, r0
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b7f      	cmp	r3, #127	; 0x7f
 80015f6:	d809      	bhi.n	800160c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	001a      	movs	r2, r3
 80015fe:	231f      	movs	r3, #31
 8001600:	401a      	ands	r2, r3
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_EnableIRQ+0x30>)
 8001604:	2101      	movs	r1, #1
 8001606:	4091      	lsls	r1, r2
 8001608:	000a      	movs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	0002      	movs	r2, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d828      	bhi.n	8001680 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800162e:	4a2f      	ldr	r2, [pc, #188]	; (80016ec <__NVIC_SetPriority+0xd4>)
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b25b      	sxtb	r3, r3
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	33c0      	adds	r3, #192	; 0xc0
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	589b      	ldr	r3, [r3, r2]
 800163e:	1dfa      	adds	r2, r7, #7
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	0011      	movs	r1, r2
 8001644:	2203      	movs	r2, #3
 8001646:	400a      	ands	r2, r1
 8001648:	00d2      	lsls	r2, r2, #3
 800164a:	21ff      	movs	r1, #255	; 0xff
 800164c:	4091      	lsls	r1, r2
 800164e:	000a      	movs	r2, r1
 8001650:	43d2      	mvns	r2, r2
 8001652:	401a      	ands	r2, r3
 8001654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	019b      	lsls	r3, r3, #6
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	401a      	ands	r2, r3
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0018      	movs	r0, r3
 8001664:	2303      	movs	r3, #3
 8001666:	4003      	ands	r3, r0
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	481f      	ldr	r0, [pc, #124]	; (80016ec <__NVIC_SetPriority+0xd4>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	430a      	orrs	r2, r1
 8001678:	33c0      	adds	r3, #192	; 0xc0
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800167e:	e031      	b.n	80016e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <__NVIC_SetPriority+0xd8>)
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	0019      	movs	r1, r3
 8001688:	230f      	movs	r3, #15
 800168a:	400b      	ands	r3, r1
 800168c:	3b08      	subs	r3, #8
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3306      	adds	r3, #6
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	18d3      	adds	r3, r2, r3
 8001696:	3304      	adds	r3, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	1dfa      	adds	r2, r7, #7
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	0011      	movs	r1, r2
 80016a0:	2203      	movs	r2, #3
 80016a2:	400a      	ands	r2, r1
 80016a4:	00d2      	lsls	r2, r2, #3
 80016a6:	21ff      	movs	r1, #255	; 0xff
 80016a8:	4091      	lsls	r1, r2
 80016aa:	000a      	movs	r2, r1
 80016ac:	43d2      	mvns	r2, r2
 80016ae:	401a      	ands	r2, r3
 80016b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	22ff      	movs	r2, #255	; 0xff
 80016b8:	401a      	ands	r2, r3
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	0018      	movs	r0, r3
 80016c0:	2303      	movs	r3, #3
 80016c2:	4003      	ands	r3, r0
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c8:	4809      	ldr	r0, [pc, #36]	; (80016f0 <__NVIC_SetPriority+0xd8>)
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	001c      	movs	r4, r3
 80016d0:	230f      	movs	r3, #15
 80016d2:	4023      	ands	r3, r4
 80016d4:	3b08      	subs	r3, #8
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	430a      	orrs	r2, r1
 80016da:	3306      	adds	r3, #6
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	18c3      	adds	r3, r0, r3
 80016e0:	3304      	adds	r3, #4
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b003      	add	sp, #12
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1e5a      	subs	r2, r3, #1
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	045b      	lsls	r3, r3, #17
 8001704:	429a      	cmp	r2, r3
 8001706:	d301      	bcc.n	800170c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001708:	2301      	movs	r3, #1
 800170a:	e010      	b.n	800172e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <SysTick_Config+0x44>)
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	3a01      	subs	r2, #1
 8001712:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001714:	2301      	movs	r3, #1
 8001716:	425b      	negs	r3, r3
 8001718:	2103      	movs	r1, #3
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff ff7c 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <SysTick_Config+0x44>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SysTick_Config+0x44>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	210f      	movs	r1, #15
 8001748:	187b      	adds	r3, r7, r1
 800174a:	1c02      	adds	r2, r0, #0
 800174c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	187b      	adds	r3, r7, r1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	0011      	movs	r1, r2
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff ff5d 	bl	8001618 <__NVIC_SetPriority>
}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	0002      	movs	r2, r0
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b25b      	sxtb	r3, r3
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff ff33 	bl	80015e4 <__NVIC_EnableIRQ>
}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff ffaf 	bl	80016f4 <SysTick_Config>
 8001796:	0003      	movs	r3, r0
}
 8001798:	0018      	movs	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e050      	b.n	8001854 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2225      	movs	r2, #37	; 0x25
 80017b6:	5c9b      	ldrb	r3, [r3, r2]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d008      	beq.n	80017d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2204      	movs	r2, #4
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2224      	movs	r2, #36	; 0x24
 80017c8:	2100      	movs	r1, #0
 80017ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e041      	b.n	8001854 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	210e      	movs	r1, #14
 80017dc:	438a      	bics	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	491c      	ldr	r1, [pc, #112]	; (800185c <HAL_DMA_Abort+0xbc>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2101      	movs	r1, #1
 80017fc:	438a      	bics	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_DMA_Abort+0xc0>)
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	221c      	movs	r2, #28
 800180a:	4013      	ands	r3, r2
 800180c:	2201      	movs	r2, #1
 800180e:	409a      	lsls	r2, r3
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_DMA_Abort+0xc0>)
 8001812:	430a      	orrs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800181e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00c      	beq.n	8001842 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001832:	490a      	ldr	r1, [pc, #40]	; (800185c <HAL_DMA_Abort+0xbc>)
 8001834:	400a      	ands	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001840:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2225      	movs	r2, #37	; 0x25
 8001846:	2101      	movs	r1, #1
 8001848:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2224      	movs	r2, #36	; 0x24
 800184e:	2100      	movs	r1, #0
 8001850:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}
 800185c:	fffffeff 	.word	0xfffffeff
 8001860:	40020000 	.word	0x40020000

08001864 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800186c:	230f      	movs	r3, #15
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2224      	movs	r2, #36	; 0x24
 8001878:	2100      	movs	r1, #0
 800187a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2224      	movs	r2, #36	; 0x24
 8001880:	5c9b      	ldrb	r3, [r3, r2]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_DMA_Abort_IT+0x26>
 8001886:	2302      	movs	r3, #2
 8001888:	e05e      	b.n	8001948 <HAL_DMA_Abort_IT+0xe4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2224      	movs	r2, #36	; 0x24
 800188e:	2101      	movs	r1, #1
 8001890:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2225      	movs	r2, #37	; 0x25
 8001896:	5c9b      	ldrb	r3, [r3, r2]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d007      	beq.n	80018ae <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2204      	movs	r2, #4
 80018a2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018a4:	230f      	movs	r3, #15
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	e049      	b.n	8001942 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	210e      	movs	r1, #14
 80018ba:	438a      	bics	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	438a      	bics	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	491d      	ldr	r1, [pc, #116]	; (8001950 <HAL_DMA_Abort_IT+0xec>)
 80018da:	400a      	ands	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_DMA_Abort_IT+0xf0>)
 80018e0:	6859      	ldr	r1, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	221c      	movs	r2, #28
 80018e8:	4013      	ands	r3, r2
 80018ea:	2201      	movs	r2, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_DMA_Abort_IT+0xf0>)
 80018f0:	430a      	orrs	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80018fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00c      	beq.n	8001920 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001910:	490f      	ldr	r1, [pc, #60]	; (8001950 <HAL_DMA_Abort_IT+0xec>)
 8001912:	400a      	ands	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800191e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2225      	movs	r2, #37	; 0x25
 8001924:	2101      	movs	r1, #1
 8001926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2224      	movs	r2, #36	; 0x24
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	0010      	movs	r0, r2
 8001940:	4798      	blx	r3
    }
  }
  return status;
 8001942:	230f      	movs	r3, #15
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	781b      	ldrb	r3, [r3, #0]
}
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	b004      	add	sp, #16
 800194e:	bd80      	pop	{r7, pc}
 8001950:	fffffeff 	.word	0xfffffeff
 8001954:	40020000 	.word	0x40020000

08001958 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001966:	e14d      	b.n	8001c04 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4091      	lsls	r1, r2
 8001972:	000a      	movs	r2, r1
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d100      	bne.n	8001980 <HAL_GPIO_Init+0x28>
 800197e:	e13e      	b.n	8001bfe <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x38>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b12      	cmp	r3, #18
 800198e:	d125      	bne.n	80019dc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	58d3      	ldr	r3, [r2, r3]
 800199c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2207      	movs	r2, #7
 80019a2:	4013      	ands	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	409a      	lsls	r2, r3
 80019aa:	0013      	movs	r3, r2
 80019ac:	43da      	mvns	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	220f      	movs	r2, #15
 80019ba:	401a      	ands	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2107      	movs	r1, #7
 80019c0:	400b      	ands	r3, r1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	409a      	lsls	r2, r3
 80019c6:	0013      	movs	r3, r2
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	6979      	ldr	r1, [r7, #20]
 80019da:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	409a      	lsls	r2, r3
 80019ea:	0013      	movs	r3, r2
 80019ec:	43da      	mvns	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	4013      	ands	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	401a      	ands	r2, r3
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	409a      	lsls	r2, r3
 8001a02:	0013      	movs	r3, r2
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d00b      	beq.n	8001a30 <HAL_GPIO_Init+0xd8>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a24:	2b11      	cmp	r3, #17
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b12      	cmp	r3, #18
 8001a2e:	d130      	bne.n	8001a92 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	0013      	movs	r3, r2
 8001a40:	43da      	mvns	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	4013      	ands	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	409a      	lsls	r2, r3
 8001a52:	0013      	movs	r3, r2
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a66:	2201      	movs	r2, #1
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	4013      	ands	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	401a      	ands	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d017      	beq.n	8001aca <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	055b      	lsls	r3, r3, #21
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d100      	bne.n	8001ad8 <HAL_GPIO_Init+0x180>
 8001ad6:	e092      	b.n	8001bfe <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001ad8:	4a50      	ldr	r2, [pc, #320]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3318      	adds	r3, #24
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	589b      	ldr	r3, [r3, r2]
 8001ae4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	4013      	ands	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	220f      	movs	r2, #15
 8001af0:	409a      	lsls	r2, r3
 8001af2:	0013      	movs	r3, r2
 8001af4:	43da      	mvns	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	4013      	ands	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	23a0      	movs	r3, #160	; 0xa0
 8001b00:	05db      	lsls	r3, r3, #23
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d013      	beq.n	8001b2e <HAL_GPIO_Init+0x1d6>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a45      	ldr	r2, [pc, #276]	; (8001c20 <HAL_GPIO_Init+0x2c8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00d      	beq.n	8001b2a <HAL_GPIO_Init+0x1d2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a44      	ldr	r2, [pc, #272]	; (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d007      	beq.n	8001b26 <HAL_GPIO_Init+0x1ce>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a43      	ldr	r2, [pc, #268]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d101      	bne.n	8001b22 <HAL_GPIO_Init+0x1ca>
 8001b1e:	2305      	movs	r3, #5
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x1d8>
 8001b22:	2306      	movs	r3, #6
 8001b24:	e004      	b.n	8001b30 <HAL_GPIO_Init+0x1d8>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_Init+0x1d8>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x1d8>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	2103      	movs	r1, #3
 8001b34:	400a      	ands	r2, r1
 8001b36:	00d2      	lsls	r2, r2, #3
 8001b38:	4093      	lsls	r3, r2
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001b40:	4936      	ldr	r1, [pc, #216]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3318      	adds	r3, #24
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001b4e:	4a33      	ldr	r2, [pc, #204]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	58d3      	ldr	r3, [r2, r3]
 8001b54:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43da      	mvns	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	025b      	lsls	r3, r3, #9
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001b74:	4929      	ldr	r1, [pc, #164]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001b76:	2280      	movs	r2, #128	; 0x80
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001b7e:	2384      	movs	r3, #132	; 0x84
 8001b80:	58d3      	ldr	r3, [r2, r3]
 8001b82:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43da      	mvns	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ba2:	491e      	ldr	r1, [pc, #120]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001ba4:	2284      	movs	r2, #132	; 0x84
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	035b      	lsls	r3, r3, #13
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	4013      	ands	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	039b      	lsls	r3, r3, #14
 8001bec:	4013      	ands	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	3301      	adds	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	40da      	lsrs	r2, r3
 8001c0c:	1e13      	subs	r3, r2, #0
 8001c0e:	d000      	beq.n	8001c12 <HAL_GPIO_Init+0x2ba>
 8001c10:	e6aa      	b.n	8001968 <HAL_GPIO_Init+0x10>
  }
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b006      	add	sp, #24
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	50000400 	.word	0x50000400
 8001c24:	50000800 	.word	0x50000800
 8001c28:	50001400 	.word	0x50001400

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1d0      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2201      	movs	r2, #1
 8001c44:	4013      	ands	r3, r2
 8001c46:	d100      	bne.n	8001c4a <HAL_RCC_OscConfig+0x1e>
 8001c48:	e069      	b.n	8001d1e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	4bc8      	ldr	r3, [pc, #800]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2238      	movs	r2, #56	; 0x38
 8001c50:	4013      	ands	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d15d      	bne.n	8001d1e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1bc      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	025b      	lsls	r3, r3, #9
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_OscConfig+0x56>
 8001c72:	4bbe      	ldr	r3, [pc, #760]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4bbd      	ldr	r3, [pc, #756]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	0249      	lsls	r1, r1, #9
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e020      	b.n	8001cc4 <HAL_RCC_OscConfig+0x98>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	23a0      	movs	r3, #160	; 0xa0
 8001c88:	02db      	lsls	r3, r3, #11
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d10e      	bne.n	8001cac <HAL_RCC_OscConfig+0x80>
 8001c8e:	4bb7      	ldr	r3, [pc, #732]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4bb6      	ldr	r3, [pc, #728]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	02c9      	lsls	r1, r1, #11
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	4bb3      	ldr	r3, [pc, #716]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4bb2      	ldr	r3, [pc, #712]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	0249      	lsls	r1, r1, #9
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x98>
 8001cac:	4baf      	ldr	r3, [pc, #700]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4bae      	ldr	r3, [pc, #696]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001cb2:	49af      	ldr	r1, [pc, #700]	; (8001f70 <HAL_RCC_OscConfig+0x344>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	4bac      	ldr	r3, [pc, #688]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4bab      	ldr	r3, [pc, #684]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001cbe:	49ad      	ldr	r1, [pc, #692]	; (8001f74 <HAL_RCC_OscConfig+0x348>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d014      	beq.n	8001cf6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fc80 	bl	80015d0 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001cd6:	f7ff fc7b 	bl	80015d0 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b64      	cmp	r3, #100	; 0x64
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e17b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce8:	4ba0      	ldr	r3, [pc, #640]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0xaa>
 8001cf4:	e013      	b.n	8001d1e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fc6b 	bl	80015d0 <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fc66 	bl	80015d0 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e166      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d12:	4b96      	ldr	r3, [pc, #600]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	029b      	lsls	r3, r3, #10
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d100      	bne.n	8001d2a <HAL_RCC_OscConfig+0xfe>
 8001d28:	e086      	b.n	8001e38 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2a:	4b90      	ldr	r3, [pc, #576]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2238      	movs	r2, #56	; 0x38
 8001d30:	4013      	ands	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d12f      	bne.n	8001d9a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e14c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b89      	ldr	r3, [pc, #548]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a8b      	ldr	r2, [pc, #556]	; (8001f78 <HAL_RCC_OscConfig+0x34c>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	021a      	lsls	r2, r3, #8
 8001d56:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d112      	bne.n	8001d88 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d62:	4b82      	ldr	r3, [pc, #520]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a85      	ldr	r2, [pc, #532]	; (8001f7c <HAL_RCC_OscConfig+0x350>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	4b7e      	ldr	r3, [pc, #504]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d76:	4b7d      	ldr	r3, [pc, #500]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0adb      	lsrs	r3, r3, #11
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4013      	ands	r3, r2
 8001d80:	4a7f      	ldr	r2, [pc, #508]	; (8001f80 <HAL_RCC_OscConfig+0x354>)
 8001d82:	40da      	lsrs	r2, r3
 8001d84:	4b7f      	ldr	r3, [pc, #508]	; (8001f84 <HAL_RCC_OscConfig+0x358>)
 8001d86:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d88:	4b7f      	ldr	r3, [pc, #508]	; (8001f88 <HAL_RCC_OscConfig+0x35c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff fbc3 	bl	8001518 <HAL_InitTick>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d050      	beq.n	8001e38 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e122      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d030      	beq.n	8001e04 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001da2:	4b72      	ldr	r3, [pc, #456]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a75      	ldr	r2, [pc, #468]	; (8001f7c <HAL_RCC_OscConfig+0x350>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	4b6e      	ldr	r3, [pc, #440]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001db6:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b6c      	ldr	r3, [pc, #432]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	0049      	lsls	r1, r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fc04 	bl	80015d0 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fbff 	bl	80015d0 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e0ff      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4013      	ands	r3, r2
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b5f      	ldr	r3, [pc, #380]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a61      	ldr	r2, [pc, #388]	; (8001f78 <HAL_RCC_OscConfig+0x34c>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	021a      	lsls	r2, r3, #8
 8001dfc:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	e019      	b.n	8001e38 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001e04:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b58      	ldr	r3, [pc, #352]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001e0a:	4960      	ldr	r1, [pc, #384]	; (8001f8c <HAL_RCC_OscConfig+0x360>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fbde 	bl	80015d0 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fbd9 	bl	80015d0 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0d9      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e2c:	4b4f      	ldr	r3, [pc, #316]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4013      	ands	r3, r2
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d042      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001e42:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2238      	movs	r2, #56	; 0x38
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b18      	cmp	r3, #24
 8001e4c:	d105      	bne.n	8001e5a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d138      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0c2      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d019      	beq.n	8001e96 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e62:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001e64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e66:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001e68:	2101      	movs	r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fbaf 	bl	80015d0 <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fbaa 	bl	80015d0 <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e0aa      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8e:	2202      	movs	r2, #2
 8001e90:	4013      	ands	r3, r2
 8001e92:	d0f1      	beq.n	8001e78 <HAL_RCC_OscConfig+0x24c>
 8001e94:	e018      	b.n	8001ec8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e96:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001e98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e9a:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	438a      	bics	r2, r1
 8001ea0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fb95 	bl	80015d0 <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001eac:	f7ff fb90 	bl	80015d0 <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e090      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d1f1      	bne.n	8001eac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d100      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x2a8>
 8001ed2:	e084      	b.n	8001fde <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001edc:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2238      	movs	r2, #56	; 0x38
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d000      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2c6>
 8001ef0:	e075      	b.n	8001fde <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e074      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_OscConfig+0x2e0>
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001f00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	430a      	orrs	r2, r1
 8001f08:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f0a:	e01c      	b.n	8001f46 <HAL_RCC_OscConfig+0x31a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d10c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x302>
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001f16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f18:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f2c:	e00b      	b.n	8001f46 <HAL_RCC_OscConfig+0x31a>
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001f30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001f34:	2101      	movs	r1, #1
 8001f36:	438a      	bics	r2, r1
 8001f38:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001f3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x340>)
 8001f40:	2104      	movs	r1, #4
 8001f42:	438a      	bics	r2, r1
 8001f44:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d028      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fb3f 	bl	80015d0 <HAL_GetTick>
 8001f52:	0003      	movs	r3, r0
 8001f54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f56:	e01d      	b.n	8001f94 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7ff fb3a 	bl	80015d0 <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_RCC_OscConfig+0x364>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d915      	bls.n	8001f94 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e039      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	fffeffff 	.word	0xfffeffff
 8001f74:	fffbffff 	.word	0xfffbffff
 8001f78:	ffff80ff 	.word	0xffff80ff
 8001f7c:	ffffc7ff 	.word	0xffffc7ff
 8001f80:	02dc6c00 	.word	0x02dc6c00
 8001f84:	20000010 	.word	0x20000010
 8001f88:	20000014 	.word	0x20000014
 8001f8c:	fffffeff 	.word	0xfffffeff
 8001f90:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_RCC_OscConfig+0x3bc>)
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2202      	movs	r2, #2
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d0dc      	beq.n	8001f58 <HAL_RCC_OscConfig+0x32c>
 8001f9e:	e013      	b.n	8001fc8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fb16 	bl	80015d0 <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001fa8:	e009      	b.n	8001fbe <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7ff fb11 	bl	80015d0 <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_RCC_OscConfig+0x3c0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e010      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_RCC_OscConfig+0x3bc>)
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001fc8:	230f      	movs	r3, #15
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d105      	bne.n	8001fde <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_OscConfig+0x3bc>)
 8001fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_RCC_OscConfig+0x3bc>)
 8001fd8:	4905      	ldr	r1, [pc, #20]	; (8001ff0 <HAL_RCC_OscConfig+0x3c4>)
 8001fda:	400a      	ands	r2, r1
 8001fdc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b006      	add	sp, #24
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	00001388 	.word	0x00001388
 8001ff0:	efffffff 	.word	0xefffffff

08001ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0e9      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2207      	movs	r2, #7
 800200e:	4013      	ands	r3, r2
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d91e      	bls.n	8002054 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b73      	ldr	r3, [pc, #460]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2207      	movs	r2, #7
 800201c:	4393      	bics	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	4b70      	ldr	r3, [pc, #448]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002028:	f7ff fad2 	bl	80015d0 <HAL_GetTick>
 800202c:	0003      	movs	r3, r0
 800202e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002030:	e009      	b.n	8002046 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002032:	f7ff facd 	bl	80015d0 <HAL_GetTick>
 8002036:	0002      	movs	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	4a6a      	ldr	r2, [pc, #424]	; (80021e8 <HAL_RCC_ClockConfig+0x1f4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e0ca      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002046:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2207      	movs	r2, #7
 800204c:	4013      	ands	r3, r2
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d1ee      	bne.n	8002032 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2202      	movs	r2, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d017      	beq.n	800208e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2204      	movs	r2, #4
 8002064:	4013      	ands	r3, r2
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002068:	4b60      	ldr	r3, [pc, #384]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a60      	ldr	r2, [pc, #384]	; (80021f0 <HAL_RCC_ClockConfig+0x1fc>)
 800206e:	401a      	ands	r2, r3
 8002070:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 8002072:	21b0      	movs	r1, #176	; 0xb0
 8002074:	0109      	lsls	r1, r1, #4
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207a:	4b5c      	ldr	r3, [pc, #368]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	4a5d      	ldr	r2, [pc, #372]	; (80021f4 <HAL_RCC_ClockConfig+0x200>)
 8002080:	4013      	ands	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4b58      	ldr	r3, [pc, #352]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2201      	movs	r2, #1
 8002094:	4013      	ands	r3, r2
 8002096:	d055      	beq.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002098:	4b54      	ldr	r3, [pc, #336]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	221c      	movs	r2, #28
 800209e:	4393      	bics	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	4b51      	ldr	r3, [pc, #324]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b4:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	029b      	lsls	r3, r3, #10
 80020bc:	4013      	ands	r3, r2
 80020be:	d11f      	bne.n	8002100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e08b      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020cc:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4013      	ands	r3, r2
 80020d6:	d113      	bne.n	8002100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e07f      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80020e4:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 80020e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e8:	2202      	movs	r2, #2
 80020ea:	4013      	ands	r3, r2
 80020ec:	d108      	bne.n	8002100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e074      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020f2:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	2202      	movs	r2, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e06d      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002100:	4b3a      	ldr	r3, [pc, #232]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2207      	movs	r2, #7
 8002106:	4393      	bics	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4b37      	ldr	r3, [pc, #220]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002114:	f7ff fa5c 	bl	80015d0 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211c:	e009      	b.n	8002132 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800211e:	f7ff fa57 	bl	80015d0 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <HAL_RCC_ClockConfig+0x1f4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e054      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2238      	movs	r2, #56	; 0x38
 8002138:	401a      	ands	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	429a      	cmp	r2, r3
 8002142:	d1ec      	bne.n	800211e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2207      	movs	r2, #7
 800214a:	4013      	ands	r3, r2
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d21e      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2207      	movs	r2, #7
 8002158:	4393      	bics	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002164:	f7ff fa34 	bl	80015d0 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800216c:	e009      	b.n	8002182 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800216e:	f7ff fa2f 	bl	80015d0 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_RCC_ClockConfig+0x1f4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e02c      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2207      	movs	r2, #7
 8002188:	4013      	ands	r3, r2
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d1ee      	bne.n	800216e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2204      	movs	r2, #4
 8002196:	4013      	ands	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <HAL_RCC_ClockConfig+0x204>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021ae:	f000 f82b 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021b2:	0001      	movs	r1, r0
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	220f      	movs	r2, #15
 80021bc:	401a      	ands	r2, r3
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <HAL_RCC_ClockConfig+0x208>)
 80021c0:	0092      	lsls	r2, r2, #2
 80021c2:	58d3      	ldr	r3, [r2, r3]
 80021c4:	221f      	movs	r2, #31
 80021c6:	4013      	ands	r3, r2
 80021c8:	000a      	movs	r2, r1
 80021ca:	40da      	lsrs	r2, r3
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_RCC_ClockConfig+0x20c>)
 80021ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_RCC_ClockConfig+0x210>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff f99f 	bl	8001518 <HAL_InitTick>
 80021da:	0003      	movs	r3, r0
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b004      	add	sp, #16
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40022000 	.word	0x40022000
 80021e8:	00001388 	.word	0x00001388
 80021ec:	40021000 	.word	0x40021000
 80021f0:	ffff84ff 	.word	0xffff84ff
 80021f4:	fffff0ff 	.word	0xfffff0ff
 80021f8:	ffff8fff 	.word	0xffff8fff
 80021fc:	08005e3c 	.word	0x08005e3c
 8002200:	20000010 	.word	0x20000010
 8002204:	20000014 	.word	0x20000014

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <HAL_RCC_GetSysClockFreq+0x78>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2238      	movs	r2, #56	; 0x38
 8002214:	4013      	ands	r3, r2
 8002216:	d10f      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_GetSysClockFreq+0x78>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0adb      	lsrs	r3, r3, #11
 800221e:	2207      	movs	r2, #7
 8002220:	4013      	ands	r3, r2
 8002222:	2201      	movs	r2, #1
 8002224:	409a      	lsls	r2, r3
 8002226:	0013      	movs	r3, r2
 8002228:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800222a:	6839      	ldr	r1, [r7, #0]
 800222c:	4815      	ldr	r0, [pc, #84]	; (8002284 <HAL_RCC_GetSysClockFreq+0x7c>)
 800222e:	f7fd ff6b 	bl	8000108 <__udivsi3>
 8002232:	0003      	movs	r3, r0
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	e01e      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_RCC_GetSysClockFreq+0x78>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2238      	movs	r2, #56	; 0x38
 800223e:	4013      	ands	r3, r2
 8002240:	2b08      	cmp	r3, #8
 8002242:	d102      	bne.n	800224a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_RCC_GetSysClockFreq+0x80>)
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	e015      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_RCC_GetSysClockFreq+0x78>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2238      	movs	r2, #56	; 0x38
 8002250:	4013      	ands	r3, r2
 8002252:	2b20      	cmp	r3, #32
 8002254:	d103      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	e00b      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_RCC_GetSysClockFreq+0x78>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2238      	movs	r2, #56	; 0x38
 8002264:	4013      	ands	r3, r2
 8002266:	2b18      	cmp	r3, #24
 8002268:	d103      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800226a:	23fa      	movs	r3, #250	; 0xfa
 800226c:	01db      	lsls	r3, r3, #7
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	e001      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002276:	687b      	ldr	r3, [r7, #4]
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	02dc6c00 	.word	0x02dc6c00
 8002288:	007a1200 	.word	0x007a1200

0800228c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002290:	4b02      	ldr	r3, [pc, #8]	; (800229c <HAL_RCC_GetHCLKFreq+0x10>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	20000010 	.word	0x20000010

080022a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80022a4:	f7ff fff2 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022a8:	0001      	movs	r1, r0
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	0b1b      	lsrs	r3, r3, #12
 80022b0:	2207      	movs	r2, #7
 80022b2:	401a      	ands	r2, r3
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	58d3      	ldr	r3, [r2, r3]
 80022ba:	221f      	movs	r2, #31
 80022bc:	4013      	ands	r3, r2
 80022be:	40d9      	lsrs	r1, r3
 80022c0:	000b      	movs	r3, r1
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08005e7c 	.word	0x08005e7c

080022d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80022d8:	2313      	movs	r3, #19
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022e0:	2312      	movs	r3, #18
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	029b      	lsls	r3, r3, #10
 80022f0:	4013      	ands	r3, r2
 80022f2:	d100      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80022f4:	e079      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2011      	movs	r0, #17
 80022f8:	183b      	adds	r3, r7, r0
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fe:	4b64      	ldr	r3, [pc, #400]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	055b      	lsls	r3, r3, #21
 8002306:	4013      	ands	r3, r2
 8002308:	d110      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b61      	ldr	r3, [pc, #388]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800230c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800230e:	4b60      	ldr	r3, [pc, #384]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	0549      	lsls	r1, r1, #21
 8002314:	430a      	orrs	r2, r1
 8002316:	63da      	str	r2, [r3, #60]	; 0x3c
 8002318:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800231a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	055b      	lsls	r3, r3, #21
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002326:	183b      	adds	r3, r7, r0
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800232c:	4b58      	ldr	r3, [pc, #352]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800232e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002330:	23c0      	movs	r3, #192	; 0xc0
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4013      	ands	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	d014      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002348:	4b51      	ldr	r3, [pc, #324]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800234a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234c:	4a51      	ldr	r2, [pc, #324]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800234e:	4013      	ands	r3, r2
 8002350:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002352:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002356:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	0249      	lsls	r1, r1, #9
 800235c:	430a      	orrs	r2, r1
 800235e:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002360:	4b4b      	ldr	r3, [pc, #300]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002362:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002364:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002366:	494c      	ldr	r1, [pc, #304]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002368:	400a      	ands	r2, r1
 800236a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800236c:	4b48      	ldr	r3, [pc, #288]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2201      	movs	r2, #1
 8002376:	4013      	ands	r3, r2
 8002378:	d016      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7ff f929 	bl	80015d0 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002382:	e00c      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002384:	f7ff f924 	bl	80015d0 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	4a43      	ldr	r2, [pc, #268]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d904      	bls.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002394:	2313      	movs	r3, #19
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	2203      	movs	r2, #3
 800239a:	701a      	strb	r2, [r3, #0]
          break;
 800239c:	e004      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800239e:	4b3c      	ldr	r3, [pc, #240]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d0ed      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80023a8:	2313      	movs	r3, #19
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	4a37      	ldr	r2, [pc, #220]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	4b33      	ldr	r3, [pc, #204]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80023c6:	e005      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c8:	2312      	movs	r3, #18
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2213      	movs	r2, #19
 80023ce:	18ba      	adds	r2, r7, r2
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023d4:	2311      	movs	r3, #17
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023e4:	492e      	ldr	r1, [pc, #184]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	2203      	movs	r2, #3
 80023fa:	4393      	bics	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002404:	430a      	orrs	r2, r1
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2240      	movs	r2, #64	; 0x40
 800240e:	4013      	ands	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002418:	4013      	ands	r3, r2
 800241a:	0019      	movs	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002422:	430a      	orrs	r2, r1
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	01db      	lsls	r3, r3, #7
 800242e:	4013      	ands	r3, r2
 8002430:	d008      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	0899      	lsrs	r1, r3, #2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002440:	430a      	orrs	r2, r1
 8002442:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	4013      	ands	r3, r2
 800244e:	d009      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002456:	4013      	ands	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002460:	430a      	orrs	r2, r1
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	da09      	bge.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	22e0      	movs	r2, #224	; 0xe0
 8002472:	4393      	bics	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002480:	2312      	movs	r3, #18
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b006      	add	sp, #24
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	40021000 	.word	0x40021000
 8002494:	fffffcff 	.word	0xfffffcff
 8002498:	fffeffff 	.word	0xfffeffff
 800249c:	00001388 	.word	0x00001388
 80024a0:	efffffff 	.word	0xefffffff
 80024a4:	ffffcfff 	.word	0xffffcfff
 80024a8:	ffff3fff 	.word	0xffff3fff

080024ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e04a      	b.n	8002554 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	223d      	movs	r2, #61	; 0x3d
 80024c2:	5c9b      	ldrb	r3, [r3, r2]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	223c      	movs	r2, #60	; 0x3c
 80024ce:	2100      	movs	r1, #0
 80024d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7fe fe4b 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	223d      	movs	r2, #61	; 0x3d
 80024de:	2102      	movs	r1, #2
 80024e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	0019      	movs	r1, r3
 80024ec:	0010      	movs	r0, r2
 80024ee:	f000 fde9 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2248      	movs	r2, #72	; 0x48
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	223e      	movs	r2, #62	; 0x3e
 80024fe:	2101      	movs	r1, #1
 8002500:	5499      	strb	r1, [r3, r2]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	223f      	movs	r2, #63	; 0x3f
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2240      	movs	r2, #64	; 0x40
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2241      	movs	r2, #65	; 0x41
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2242      	movs	r2, #66	; 0x42
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2243      	movs	r2, #67	; 0x43
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2244      	movs	r2, #68	; 0x44
 800252e:	2101      	movs	r1, #1
 8002530:	5499      	strb	r1, [r3, r2]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2245      	movs	r2, #69	; 0x45
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2246      	movs	r2, #70	; 0x46
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2247      	movs	r2, #71	; 0x47
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	223d      	movs	r2, #61	; 0x3d
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	0018      	movs	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e04a      	b.n	8002604 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	223d      	movs	r2, #61	; 0x3d
 8002572:	5c9b      	ldrb	r3, [r3, r2]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d107      	bne.n	800258a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	223c      	movs	r2, #60	; 0x3c
 800257e:	2100      	movs	r1, #0
 8002580:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	0018      	movs	r0, r3
 8002586:	f000 f841 	bl	800260c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	223d      	movs	r2, #61	; 0x3d
 800258e:	2102      	movs	r1, #2
 8002590:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	0019      	movs	r1, r3
 800259c:	0010      	movs	r0, r2
 800259e:	f000 fd91 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2248      	movs	r2, #72	; 0x48
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	223e      	movs	r2, #62	; 0x3e
 80025ae:	2101      	movs	r1, #1
 80025b0:	5499      	strb	r1, [r3, r2]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	223f      	movs	r2, #63	; 0x3f
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2240      	movs	r2, #64	; 0x40
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2241      	movs	r2, #65	; 0x41
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2242      	movs	r2, #66	; 0x42
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2243      	movs	r2, #67	; 0x43
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2244      	movs	r2, #68	; 0x44
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2245      	movs	r2, #69	; 0x45
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2246      	movs	r2, #70	; 0x46
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2247      	movs	r2, #71	; 0x47
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	223d      	movs	r2, #61	; 0x3d
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d108      	bne.n	800263e <HAL_TIM_PWM_Start+0x22>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	223e      	movs	r2, #62	; 0x3e
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	4193      	sbcs	r3, r2
 800263a:	b2db      	uxtb	r3, r3
 800263c:	e037      	b.n	80026ae <HAL_TIM_PWM_Start+0x92>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b04      	cmp	r3, #4
 8002642:	d108      	bne.n	8002656 <HAL_TIM_PWM_Start+0x3a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	223f      	movs	r2, #63	; 0x3f
 8002648:	5c9b      	ldrb	r3, [r3, r2]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	4193      	sbcs	r3, r2
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e02b      	b.n	80026ae <HAL_TIM_PWM_Start+0x92>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d108      	bne.n	800266e <HAL_TIM_PWM_Start+0x52>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	5c9b      	ldrb	r3, [r3, r2]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	4193      	sbcs	r3, r2
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e01f      	b.n	80026ae <HAL_TIM_PWM_Start+0x92>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d108      	bne.n	8002686 <HAL_TIM_PWM_Start+0x6a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2241      	movs	r2, #65	; 0x41
 8002678:	5c9b      	ldrb	r3, [r3, r2]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	1e5a      	subs	r2, r3, #1
 8002680:	4193      	sbcs	r3, r2
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e013      	b.n	80026ae <HAL_TIM_PWM_Start+0x92>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b10      	cmp	r3, #16
 800268a:	d108      	bne.n	800269e <HAL_TIM_PWM_Start+0x82>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2242      	movs	r2, #66	; 0x42
 8002690:	5c9b      	ldrb	r3, [r3, r2]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	4193      	sbcs	r3, r2
 800269a:	b2db      	uxtb	r3, r3
 800269c:	e007      	b.n	80026ae <HAL_TIM_PWM_Start+0x92>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2243      	movs	r2, #67	; 0x43
 80026a2:	5c9b      	ldrb	r3, [r3, r2]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	4193      	sbcs	r3, r2
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07b      	b.n	80027ae <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	223e      	movs	r2, #62	; 0x3e
 80026c0:	2102      	movs	r1, #2
 80026c2:	5499      	strb	r1, [r3, r2]
 80026c4:	e023      	b.n	800270e <HAL_TIM_PWM_Start+0xf2>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_PWM_Start+0xba>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	223f      	movs	r2, #63	; 0x3f
 80026d0:	2102      	movs	r1, #2
 80026d2:	5499      	strb	r1, [r3, r2]
 80026d4:	e01b      	b.n	800270e <HAL_TIM_PWM_Start+0xf2>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_PWM_Start+0xca>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	; 0x40
 80026e0:	2102      	movs	r1, #2
 80026e2:	5499      	strb	r1, [r3, r2]
 80026e4:	e013      	b.n	800270e <HAL_TIM_PWM_Start+0xf2>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_PWM_Start+0xda>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2241      	movs	r2, #65	; 0x41
 80026f0:	2102      	movs	r1, #2
 80026f2:	5499      	strb	r1, [r3, r2]
 80026f4:	e00b      	b.n	800270e <HAL_TIM_PWM_Start+0xf2>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_PWM_Start+0xea>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2242      	movs	r2, #66	; 0x42
 8002700:	2102      	movs	r1, #2
 8002702:	5499      	strb	r1, [r3, r2]
 8002704:	e003      	b.n	800270e <HAL_TIM_PWM_Start+0xf2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2243      	movs	r2, #67	; 0x43
 800270a:	2102      	movs	r1, #2
 800270c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	0018      	movs	r0, r3
 8002718:	f001 f8f6 	bl	8003908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <HAL_TIM_PWM_Start+0x19c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_TIM_PWM_Start+0x11e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a24      	ldr	r2, [pc, #144]	; (80027bc <HAL_TIM_PWM_Start+0x1a0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_TIM_PWM_Start+0x11e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <HAL_TIM_PWM_Start+0x1a4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_TIM_PWM_Start+0x122>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_TIM_PWM_Start+0x124>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2180      	movs	r1, #128	; 0x80
 8002750:	0209      	lsls	r1, r1, #8
 8002752:	430a      	orrs	r2, r1
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <HAL_TIM_PWM_Start+0x19c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d004      	beq.n	800276a <HAL_TIM_PWM_Start+0x14e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <HAL_TIM_PWM_Start+0x1a8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d116      	bne.n	8002798 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <HAL_TIM_PWM_Start+0x1ac>)
 8002772:	4013      	ands	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b06      	cmp	r3, #6
 800277a:	d016      	beq.n	80027aa <HAL_TIM_PWM_Start+0x18e>
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	025b      	lsls	r3, r3, #9
 8002782:	429a      	cmp	r2, r3
 8002784:	d011      	beq.n	80027aa <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002796:	e008      	b.n	80027aa <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2101      	movs	r1, #1
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e000      	b.n	80027ac <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b004      	add	sp, #16
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40014400 	.word	0x40014400
 80027c0:	40014800 	.word	0x40014800
 80027c4:	40000400 	.word	0x40000400
 80027c8:	00010007 	.word	0x00010007

080027cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e04a      	b.n	8002874 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223d      	movs	r2, #61	; 0x3d
 80027e2:	5c9b      	ldrb	r3, [r3, r2]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	223c      	movs	r2, #60	; 0x3c
 80027ee:	2100      	movs	r1, #0
 80027f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7fe fbbd 	bl	8000f74 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	223d      	movs	r2, #61	; 0x3d
 80027fe:	2102      	movs	r1, #2
 8002800:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3304      	adds	r3, #4
 800280a:	0019      	movs	r1, r3
 800280c:	0010      	movs	r0, r2
 800280e:	f000 fc59 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2248      	movs	r2, #72	; 0x48
 8002816:	2101      	movs	r1, #1
 8002818:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	223e      	movs	r2, #62	; 0x3e
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	223f      	movs	r2, #63	; 0x3f
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2240      	movs	r2, #64	; 0x40
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2241      	movs	r2, #65	; 0x41
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2242      	movs	r2, #66	; 0x42
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2243      	movs	r2, #67	; 0x43
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2244      	movs	r2, #68	; 0x44
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2245      	movs	r2, #69	; 0x45
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2246      	movs	r2, #70	; 0x46
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2247      	movs	r2, #71	; 0x47
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	223d      	movs	r2, #61	; 0x3d
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b002      	add	sp, #8
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	230f      	movs	r3, #15
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d104      	bne.n	800289e <HAL_TIM_IC_Start_IT+0x22>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	223e      	movs	r2, #62	; 0x3e
 8002898:	5c9b      	ldrb	r3, [r3, r2]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	e023      	b.n	80028e6 <HAL_TIM_IC_Start_IT+0x6a>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d104      	bne.n	80028ae <HAL_TIM_IC_Start_IT+0x32>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	223f      	movs	r2, #63	; 0x3f
 80028a8:	5c9b      	ldrb	r3, [r3, r2]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e01b      	b.n	80028e6 <HAL_TIM_IC_Start_IT+0x6a>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d104      	bne.n	80028be <HAL_TIM_IC_Start_IT+0x42>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2240      	movs	r2, #64	; 0x40
 80028b8:	5c9b      	ldrb	r3, [r3, r2]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	e013      	b.n	80028e6 <HAL_TIM_IC_Start_IT+0x6a>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d104      	bne.n	80028ce <HAL_TIM_IC_Start_IT+0x52>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2241      	movs	r2, #65	; 0x41
 80028c8:	5c9b      	ldrb	r3, [r3, r2]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	e00b      	b.n	80028e6 <HAL_TIM_IC_Start_IT+0x6a>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d104      	bne.n	80028de <HAL_TIM_IC_Start_IT+0x62>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2242      	movs	r2, #66	; 0x42
 80028d8:	5c9b      	ldrb	r3, [r3, r2]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e003      	b.n	80028e6 <HAL_TIM_IC_Start_IT+0x6a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2243      	movs	r2, #67	; 0x43
 80028e2:	5c9b      	ldrb	r3, [r3, r2]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	220e      	movs	r2, #14
 80028e8:	18ba      	adds	r2, r7, r2
 80028ea:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_TIM_IC_Start_IT+0x80>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2244      	movs	r2, #68	; 0x44
 80028f6:	5c9b      	ldrb	r3, [r3, r2]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	e013      	b.n	8002924 <HAL_TIM_IC_Start_IT+0xa8>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d104      	bne.n	800290c <HAL_TIM_IC_Start_IT+0x90>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2245      	movs	r2, #69	; 0x45
 8002906:	5c9b      	ldrb	r3, [r3, r2]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e00b      	b.n	8002924 <HAL_TIM_IC_Start_IT+0xa8>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b08      	cmp	r3, #8
 8002910:	d104      	bne.n	800291c <HAL_TIM_IC_Start_IT+0xa0>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2246      	movs	r2, #70	; 0x46
 8002916:	5c9b      	ldrb	r3, [r3, r2]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e003      	b.n	8002924 <HAL_TIM_IC_Start_IT+0xa8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2247      	movs	r2, #71	; 0x47
 8002920:	5c9b      	ldrb	r3, [r3, r2]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	210d      	movs	r1, #13
 8002926:	187a      	adds	r2, r7, r1
 8002928:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800292a:	230e      	movs	r3, #14
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d103      	bne.n	800293c <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002934:	187b      	adds	r3, r7, r1
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0bd      	b.n	8002abc <HAL_TIM_IC_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <HAL_TIM_IC_Start_IT+0xd4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	223e      	movs	r2, #62	; 0x3e
 800294a:	2102      	movs	r1, #2
 800294c:	5499      	strb	r1, [r3, r2]
 800294e:	e023      	b.n	8002998 <HAL_TIM_IC_Start_IT+0x11c>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b04      	cmp	r3, #4
 8002954:	d104      	bne.n	8002960 <HAL_TIM_IC_Start_IT+0xe4>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	223f      	movs	r2, #63	; 0x3f
 800295a:	2102      	movs	r1, #2
 800295c:	5499      	strb	r1, [r3, r2]
 800295e:	e01b      	b.n	8002998 <HAL_TIM_IC_Start_IT+0x11c>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b08      	cmp	r3, #8
 8002964:	d104      	bne.n	8002970 <HAL_TIM_IC_Start_IT+0xf4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2240      	movs	r2, #64	; 0x40
 800296a:	2102      	movs	r1, #2
 800296c:	5499      	strb	r1, [r3, r2]
 800296e:	e013      	b.n	8002998 <HAL_TIM_IC_Start_IT+0x11c>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d104      	bne.n	8002980 <HAL_TIM_IC_Start_IT+0x104>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2241      	movs	r2, #65	; 0x41
 800297a:	2102      	movs	r1, #2
 800297c:	5499      	strb	r1, [r3, r2]
 800297e:	e00b      	b.n	8002998 <HAL_TIM_IC_Start_IT+0x11c>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b10      	cmp	r3, #16
 8002984:	d104      	bne.n	8002990 <HAL_TIM_IC_Start_IT+0x114>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2242      	movs	r2, #66	; 0x42
 800298a:	2102      	movs	r1, #2
 800298c:	5499      	strb	r1, [r3, r2]
 800298e:	e003      	b.n	8002998 <HAL_TIM_IC_Start_IT+0x11c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2243      	movs	r2, #67	; 0x43
 8002994:	2102      	movs	r1, #2
 8002996:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <HAL_TIM_IC_Start_IT+0x12c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2244      	movs	r2, #68	; 0x44
 80029a2:	2102      	movs	r1, #2
 80029a4:	5499      	strb	r1, [r3, r2]
 80029a6:	e013      	b.n	80029d0 <HAL_TIM_IC_Start_IT+0x154>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d104      	bne.n	80029b8 <HAL_TIM_IC_Start_IT+0x13c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2245      	movs	r2, #69	; 0x45
 80029b2:	2102      	movs	r1, #2
 80029b4:	5499      	strb	r1, [r3, r2]
 80029b6:	e00b      	b.n	80029d0 <HAL_TIM_IC_Start_IT+0x154>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d104      	bne.n	80029c8 <HAL_TIM_IC_Start_IT+0x14c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2246      	movs	r2, #70	; 0x46
 80029c2:	2102      	movs	r1, #2
 80029c4:	5499      	strb	r1, [r3, r2]
 80029c6:	e003      	b.n	80029d0 <HAL_TIM_IC_Start_IT+0x154>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2247      	movs	r2, #71	; 0x47
 80029cc:	2102      	movs	r1, #2
 80029ce:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d02a      	beq.n	8002a2c <HAL_TIM_IC_Start_IT+0x1b0>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	d830      	bhi.n	8002a3e <HAL_TIM_IC_Start_IT+0x1c2>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d01b      	beq.n	8002a1a <HAL_TIM_IC_Start_IT+0x19e>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d82a      	bhi.n	8002a3e <HAL_TIM_IC_Start_IT+0x1c2>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IC_Start_IT+0x17a>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d009      	beq.n	8002a08 <HAL_TIM_IC_Start_IT+0x18c>
 80029f4:	e023      	b.n	8002a3e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2102      	movs	r1, #2
 8002a02:	430a      	orrs	r2, r1
 8002a04:	60da      	str	r2, [r3, #12]
      break;
 8002a06:	e01f      	b.n	8002a48 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2104      	movs	r1, #4
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]
      break;
 8002a18:	e016      	b.n	8002a48 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2108      	movs	r1, #8
 8002a26:	430a      	orrs	r2, r1
 8002a28:	60da      	str	r2, [r3, #12]
      break;
 8002a2a:	e00d      	b.n	8002a48 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2110      	movs	r1, #16
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]
      break;
 8002a3c:	e004      	b.n	8002a48 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8002a3e:	230f      	movs	r3, #15
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
      break;
 8002a46:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002a48:	230f      	movs	r3, #15
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d131      	bne.n	8002ab6 <HAL_TIM_IC_Start_IT+0x23a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6839      	ldr	r1, [r7, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 ff54 	bl	8003908 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <HAL_TIM_IC_Start_IT+0x248>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_TIM_IC_Start_IT+0x1f8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <HAL_TIM_IC_Start_IT+0x24c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d116      	bne.n	8002aa2 <HAL_TIM_IC_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4a14      	ldr	r2, [pc, #80]	; (8002acc <HAL_TIM_IC_Start_IT+0x250>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d016      	beq.n	8002ab4 <HAL_TIM_IC_Start_IT+0x238>
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	025b      	lsls	r3, r3, #9
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d011      	beq.n	8002ab4 <HAL_TIM_IC_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	e008      	b.n	8002ab4 <HAL_TIM_IC_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e000      	b.n	8002ab6 <HAL_TIM_IC_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002ab6:	230f      	movs	r3, #15
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	781b      	ldrb	r3, [r3, #0]
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b004      	add	sp, #16
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	00010007 	.word	0x00010007

08002ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2202      	movs	r2, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	d021      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2202      	movs	r2, #2
 8002af4:	4013      	ands	r3, r2
 8002af6:	d01d      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2203      	movs	r2, #3
 8002afe:	4252      	negs	r2, r2
 8002b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	4013      	ands	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7fe f886 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e007      	b.n	8002b2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 fab7 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 fabb 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2204      	movs	r2, #4
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	4013      	ands	r3, r2
 8002b42:	d01e      	beq.n	8002b82 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2205      	movs	r2, #5
 8002b4a:	4252      	negs	r2, r2
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	23c0      	movs	r3, #192	; 0xc0
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0018      	movs	r0, r3
 8002b66:	f7fe f85f 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002b6a:	e007      	b.n	8002b7c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 fa90 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 fa94 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2208      	movs	r2, #8
 8002b86:	4013      	ands	r3, r2
 8002b88:	d021      	beq.n	8002bce <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d01d      	beq.n	8002bce <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2209      	movs	r2, #9
 8002b98:	4252      	negs	r2, r2
 8002b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	4013      	ands	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7fe f839 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002bb6:	e007      	b.n	8002bc8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 fa6a 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 fa6e 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2210      	movs	r2, #16
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d022      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d01e      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2211      	movs	r2, #17
 8002be4:	4252      	negs	r2, r2
 8002be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2208      	movs	r2, #8
 8002bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	23c0      	movs	r3, #192	; 0xc0
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7fe f812 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002c04:	e007      	b.n	8002c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 fa43 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 fa47 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	d00c      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d008      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2202      	movs	r2, #2
 8002c32:	4252      	negs	r2, r2
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 fa23 	bl	8003084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	4013      	ands	r3, r2
 8002c44:	d00c      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d008      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2281      	movs	r2, #129	; 0x81
 8002c54:	4252      	negs	r2, r2
 8002c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 ff88 	bl	8003b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4013      	ands	r3, r2
 8002c68:	d00b      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <HAL_TIM_IRQHandler+0x200>)
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 ff7f 	bl	8003b80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2240      	movs	r2, #64	; 0x40
 8002c86:	4013      	ands	r3, r2
 8002c88:	d00c      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d008      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2241      	movs	r2, #65	; 0x41
 8002c98:	4252      	negs	r2, r2
 8002c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 fa08 	bl	80030b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d00c      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d008      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2221      	movs	r2, #33	; 0x21
 8002cba:	4252      	negs	r2, r2
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 ff4d 	bl	8003b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b004      	add	sp, #16
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	fffffeff 	.word	0xfffffeff

08002cd4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2317      	movs	r3, #23
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	223c      	movs	r2, #60	; 0x3c
 8002cec:	5c9b      	ldrb	r3, [r3, r2]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_IC_ConfigChannel+0x22>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e08c      	b.n	8002e10 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	223c      	movs	r2, #60	; 0x3c
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d11b      	bne.n	8002d3c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002d14:	f000 fcde 	bl	80036d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	210c      	movs	r1, #12
 8002d24:	438a      	bics	r2, r1
 8002d26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6999      	ldr	r1, [r3, #24]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	619a      	str	r2, [r3, #24]
 8002d3a:	e062      	b.n	8002e02 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d11c      	bne.n	8002d7c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002d52:	f000 fd11 	bl	8003778 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	492d      	ldr	r1, [pc, #180]	; (8002e18 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002d62:	400a      	ands	r2, r1
 8002d64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6999      	ldr	r1, [r3, #24]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	619a      	str	r2, [r3, #24]
 8002d7a:	e042      	b.n	8002e02 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d11b      	bne.n	8002dba <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002d92:	f000 fd33 	bl	80037fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	210c      	movs	r1, #12
 8002da2:	438a      	bics	r2, r1
 8002da4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69d9      	ldr	r1, [r3, #28]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	61da      	str	r2, [r3, #28]
 8002db8:	e023      	b.n	8002e02 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d11c      	bne.n	8002dfa <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002dd0:	f000 fd54 	bl	800387c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	490e      	ldr	r1, [pc, #56]	; (8002e18 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002de0:	400a      	ands	r2, r1
 8002de2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69d9      	ldr	r1, [r3, #28]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	021a      	lsls	r2, r3, #8
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	61da      	str	r2, [r3, #28]
 8002df8:	e003      	b.n	8002e02 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002dfa:	2317      	movs	r3, #23
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	223c      	movs	r2, #60	; 0x3c
 8002e06:	2100      	movs	r1, #0
 8002e08:	5499      	strb	r1, [r3, r2]

  return status;
 8002e0a:	2317      	movs	r3, #23
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	781b      	ldrb	r3, [r3, #0]
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b006      	add	sp, #24
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	fffff3ff 	.word	0xfffff3ff

08002e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2317      	movs	r3, #23
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	223c      	movs	r2, #60	; 0x3c
 8002e34:	5c9b      	ldrb	r3, [r3, r2]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e0e5      	b.n	800300a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	223c      	movs	r2, #60	; 0x3c
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b14      	cmp	r3, #20
 8002e4a:	d900      	bls.n	8002e4e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002e4c:	e0d1      	b.n	8002ff2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	009a      	lsls	r2, r3, #2
 8002e52:	4b70      	ldr	r3, [pc, #448]	; (8003014 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002e54:	18d3      	adds	r3, r2, r3
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	0011      	movs	r1, r2
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 f99a 	bl	800319c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2108      	movs	r1, #8
 8002e74:	430a      	orrs	r2, r1
 8002e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2104      	movs	r1, #4
 8002e84:	438a      	bics	r2, r1
 8002e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6999      	ldr	r1, [r3, #24]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	619a      	str	r2, [r3, #24]
      break;
 8002e9a:	e0af      	b.n	8002ffc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	0011      	movs	r1, r2
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f000 f9f9 	bl	800329c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2180      	movs	r1, #128	; 0x80
 8002eb6:	0109      	lsls	r1, r1, #4
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4954      	ldr	r1, [pc, #336]	; (8003018 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002ec8:	400a      	ands	r2, r1
 8002eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6999      	ldr	r1, [r3, #24]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	021a      	lsls	r2, r3, #8
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	619a      	str	r2, [r3, #24]
      break;
 8002ee0:	e08c      	b.n	8002ffc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	0011      	movs	r1, r2
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 fa54 	bl	8003398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2108      	movs	r1, #8
 8002efc:	430a      	orrs	r2, r1
 8002efe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69da      	ldr	r2, [r3, #28]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69d9      	ldr	r1, [r3, #28]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	61da      	str	r2, [r3, #28]
      break;
 8002f22:	e06b      	b.n	8002ffc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	0011      	movs	r1, r2
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 fab5 	bl	800349c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	0109      	lsls	r1, r1, #4
 8002f40:	430a      	orrs	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4932      	ldr	r1, [pc, #200]	; (8003018 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002f50:	400a      	ands	r2, r1
 8002f52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69d9      	ldr	r1, [r3, #28]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	021a      	lsls	r2, r3, #8
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	61da      	str	r2, [r3, #28]
      break;
 8002f68:	e048      	b.n	8002ffc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	0011      	movs	r1, r2
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 faf6 	bl	8003564 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2108      	movs	r1, #8
 8002f84:	430a      	orrs	r2, r1
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2104      	movs	r1, #4
 8002f94:	438a      	bics	r2, r1
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002faa:	e027      	b.n	8002ffc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 fb2f 	bl	8003618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	0109      	lsls	r1, r1, #4
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4910      	ldr	r1, [pc, #64]	; (8003018 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	021a      	lsls	r2, r3, #8
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ff0:	e004      	b.n	8002ffc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002ff2:	2317      	movs	r3, #23
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
      break;
 8002ffa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	223c      	movs	r2, #60	; 0x3c
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

  return status;
 8003004:	2317      	movs	r3, #23
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	781b      	ldrb	r3, [r3, #0]
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	b006      	add	sp, #24
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	08005e9c 	.word	0x08005e9c
 8003018:	fffffbff 	.word	0xfffffbff

0800301c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b0c      	cmp	r3, #12
 800302e:	d01e      	beq.n	800306e <HAL_TIM_ReadCapturedValue+0x52>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d820      	bhi.n	8003078 <HAL_TIM_ReadCapturedValue+0x5c>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d013      	beq.n	8003064 <HAL_TIM_ReadCapturedValue+0x48>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b08      	cmp	r3, #8
 8003040:	d81a      	bhi.n	8003078 <HAL_TIM_ReadCapturedValue+0x5c>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_TIM_ReadCapturedValue+0x34>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b04      	cmp	r3, #4
 800304c:	d005      	beq.n	800305a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800304e:	e013      	b.n	8003078 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	60fb      	str	r3, [r7, #12]
      break;
 8003058:	e00f      	b.n	800307a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	60fb      	str	r3, [r7, #12]
      break;
 8003062:	e00a      	b.n	800307a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	60fb      	str	r3, [r7, #12]
      break;
 800306c:	e005      	b.n	800307a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	60fb      	str	r3, [r7, #12]
      break;
 8003076:	e000      	b.n	800307a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8003078:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b004      	add	sp, #16
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b002      	add	sp, #8
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a2b      	ldr	r2, [pc, #172]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_Base_SetConfig+0x20>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <TIM_Base_SetConfig+0xc4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d108      	bne.n	80030f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2270      	movs	r2, #112	; 0x70
 80030e8:	4393      	bics	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a22      	ldr	r2, [pc, #136]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00f      	beq.n	800311e <TIM_Base_SetConfig+0x5a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a21      	ldr	r2, [pc, #132]	; (8003188 <TIM_Base_SetConfig+0xc4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00b      	beq.n	800311e <TIM_Base_SetConfig+0x5a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a20      	ldr	r2, [pc, #128]	; (800318c <TIM_Base_SetConfig+0xc8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <TIM_Base_SetConfig+0x5a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <TIM_Base_SetConfig+0xcc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d003      	beq.n	800311e <TIM_Base_SetConfig+0x5a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <TIM_Base_SetConfig+0xd0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d108      	bne.n	8003130 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <TIM_Base_SetConfig+0xd4>)
 8003122:	4013      	ands	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2280      	movs	r2, #128	; 0x80
 8003134:	4393      	bics	r3, r2
 8003136:	001a      	movs	r2, r3
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a0b      	ldr	r2, [pc, #44]	; (8003190 <TIM_Base_SetConfig+0xcc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d003      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <TIM_Base_SetConfig+0xd0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d103      	bne.n	8003176 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	615a      	str	r2, [r3, #20]
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b004      	add	sp, #16
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40000400 	.word	0x40000400
 800318c:	40002000 	.word	0x40002000
 8003190:	40014400 	.word	0x40014400
 8003194:	40014800 	.word	0x40014800
 8003198:	fffffcff 	.word	0xfffffcff

0800319c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	2201      	movs	r2, #1
 80031b2:	4393      	bics	r3, r2
 80031b4:	001a      	movs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a2e      	ldr	r2, [pc, #184]	; (8003284 <TIM_OC1_SetConfig+0xe8>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2203      	movs	r2, #3
 80031d2:	4393      	bics	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2202      	movs	r2, #2
 80031e4:	4393      	bics	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a24      	ldr	r2, [pc, #144]	; (8003288 <TIM_OC1_SetConfig+0xec>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <TIM_OC1_SetConfig+0x6e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a23      	ldr	r2, [pc, #140]	; (800328c <TIM_OC1_SetConfig+0xf0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_OC1_SetConfig+0x6e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a22      	ldr	r2, [pc, #136]	; (8003290 <TIM_OC1_SetConfig+0xf4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10c      	bne.n	8003224 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2208      	movs	r2, #8
 800320e:	4393      	bics	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2204      	movs	r2, #4
 8003220:	4393      	bics	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a18      	ldr	r2, [pc, #96]	; (8003288 <TIM_OC1_SetConfig+0xec>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d007      	beq.n	800323c <TIM_OC1_SetConfig+0xa0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <TIM_OC1_SetConfig+0xf0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_OC1_SetConfig+0xa0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a16      	ldr	r2, [pc, #88]	; (8003290 <TIM_OC1_SetConfig+0xf4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d111      	bne.n	8003260 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4a15      	ldr	r2, [pc, #84]	; (8003294 <TIM_OC1_SetConfig+0xf8>)
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4a14      	ldr	r2, [pc, #80]	; (8003298 <TIM_OC1_SetConfig+0xfc>)
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b006      	add	sp, #24
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	fffeff8f 	.word	0xfffeff8f
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40014400 	.word	0x40014400
 8003290:	40014800 	.word	0x40014800
 8003294:	fffffeff 	.word	0xfffffeff
 8003298:	fffffdff 	.word	0xfffffdff

0800329c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	2210      	movs	r2, #16
 80032b2:	4393      	bics	r3, r2
 80032b4:	001a      	movs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a2c      	ldr	r2, [pc, #176]	; (800337c <TIM_OC2_SetConfig+0xe0>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a2b      	ldr	r2, [pc, #172]	; (8003380 <TIM_OC2_SetConfig+0xe4>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2220      	movs	r2, #32
 80032e6:	4393      	bics	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a22      	ldr	r2, [pc, #136]	; (8003384 <TIM_OC2_SetConfig+0xe8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10d      	bne.n	800331a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2280      	movs	r2, #128	; 0x80
 8003302:	4393      	bics	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2240      	movs	r2, #64	; 0x40
 8003316:	4393      	bics	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <TIM_OC2_SetConfig+0xe8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <TIM_OC2_SetConfig+0x96>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a18      	ldr	r2, [pc, #96]	; (8003388 <TIM_OC2_SetConfig+0xec>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_OC2_SetConfig+0x96>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a17      	ldr	r2, [pc, #92]	; (800338c <TIM_OC2_SetConfig+0xf0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d113      	bne.n	800335a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4a16      	ldr	r2, [pc, #88]	; (8003390 <TIM_OC2_SetConfig+0xf4>)
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4a15      	ldr	r2, [pc, #84]	; (8003394 <TIM_OC2_SetConfig+0xf8>)
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	621a      	str	r2, [r3, #32]
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b006      	add	sp, #24
 800337a:	bd80      	pop	{r7, pc}
 800337c:	feff8fff 	.word	0xfeff8fff
 8003380:	fffffcff 	.word	0xfffffcff
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40014400 	.word	0x40014400
 800338c:	40014800 	.word	0x40014800
 8003390:	fffffbff 	.word	0xfffffbff
 8003394:	fffff7ff 	.word	0xfffff7ff

08003398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a31      	ldr	r2, [pc, #196]	; (8003474 <TIM_OC3_SetConfig+0xdc>)
 80033ae:	401a      	ands	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <TIM_OC3_SetConfig+0xe0>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2203      	movs	r2, #3
 80033cc:	4393      	bics	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <TIM_OC3_SetConfig+0xe4>)
 80033de:	4013      	ands	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a23      	ldr	r2, [pc, #140]	; (8003480 <TIM_OC3_SetConfig+0xe8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d10d      	bne.n	8003412 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4a22      	ldr	r2, [pc, #136]	; (8003484 <TIM_OC3_SetConfig+0xec>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a1e      	ldr	r2, [pc, #120]	; (8003488 <TIM_OC3_SetConfig+0xf0>)
 800340e:	4013      	ands	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <TIM_OC3_SetConfig+0xe8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <TIM_OC3_SetConfig+0x92>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1b      	ldr	r2, [pc, #108]	; (800348c <TIM_OC3_SetConfig+0xf4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_OC3_SetConfig+0x92>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1a      	ldr	r2, [pc, #104]	; (8003490 <TIM_OC3_SetConfig+0xf8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d113      	bne.n	8003452 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4a19      	ldr	r2, [pc, #100]	; (8003494 <TIM_OC3_SetConfig+0xfc>)
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4a18      	ldr	r2, [pc, #96]	; (8003498 <TIM_OC3_SetConfig+0x100>)
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	621a      	str	r2, [r3, #32]
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b006      	add	sp, #24
 8003472:	bd80      	pop	{r7, pc}
 8003474:	fffffeff 	.word	0xfffffeff
 8003478:	fffeff8f 	.word	0xfffeff8f
 800347c:	fffffdff 	.word	0xfffffdff
 8003480:	40012c00 	.word	0x40012c00
 8003484:	fffff7ff 	.word	0xfffff7ff
 8003488:	fffffbff 	.word	0xfffffbff
 800348c:	40014400 	.word	0x40014400
 8003490:	40014800 	.word	0x40014800
 8003494:	ffffefff 	.word	0xffffefff
 8003498:	ffffdfff 	.word	0xffffdfff

0800349c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4a24      	ldr	r2, [pc, #144]	; (8003544 <TIM_OC4_SetConfig+0xa8>)
 80034b2:	401a      	ands	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a20      	ldr	r2, [pc, #128]	; (8003548 <TIM_OC4_SetConfig+0xac>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <TIM_OC4_SetConfig+0xb0>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <TIM_OC4_SetConfig+0xb4>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	031b      	lsls	r3, r3, #12
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a17      	ldr	r2, [pc, #92]	; (8003554 <TIM_OC4_SetConfig+0xb8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <TIM_OC4_SetConfig+0x70>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a16      	ldr	r2, [pc, #88]	; (8003558 <TIM_OC4_SetConfig+0xbc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_OC4_SetConfig+0x70>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a15      	ldr	r2, [pc, #84]	; (800355c <TIM_OC4_SetConfig+0xc0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d109      	bne.n	8003520 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	4a14      	ldr	r2, [pc, #80]	; (8003560 <TIM_OC4_SetConfig+0xc4>)
 8003510:	4013      	ands	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	b006      	add	sp, #24
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	ffffefff 	.word	0xffffefff
 8003548:	feff8fff 	.word	0xfeff8fff
 800354c:	fffffcff 	.word	0xfffffcff
 8003550:	ffffdfff 	.word	0xffffdfff
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800
 8003560:	ffffbfff 	.word	0xffffbfff

08003564 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4a21      	ldr	r2, [pc, #132]	; (8003600 <TIM_OC5_SetConfig+0x9c>)
 800357a:	401a      	ands	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <TIM_OC5_SetConfig+0xa0>)
 8003590:	4013      	ands	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4a19      	ldr	r2, [pc, #100]	; (8003608 <TIM_OC5_SetConfig+0xa4>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a15      	ldr	r2, [pc, #84]	; (800360c <TIM_OC5_SetConfig+0xa8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <TIM_OC5_SetConfig+0x66>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <TIM_OC5_SetConfig+0xac>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_OC5_SetConfig+0x66>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a13      	ldr	r2, [pc, #76]	; (8003614 <TIM_OC5_SetConfig+0xb0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d109      	bne.n	80035de <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <TIM_OC5_SetConfig+0x9c>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	621a      	str	r2, [r3, #32]
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b006      	add	sp, #24
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	fffeffff 	.word	0xfffeffff
 8003604:	fffeff8f 	.word	0xfffeff8f
 8003608:	fffdffff 	.word	0xfffdffff
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40014400 	.word	0x40014400
 8003614:	40014800 	.word	0x40014800

08003618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <TIM_OC6_SetConfig+0xa0>)
 800362e:	401a      	ands	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <TIM_OC6_SetConfig+0xa4>)
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4a1a      	ldr	r2, [pc, #104]	; (80036c0 <TIM_OC6_SetConfig+0xa8>)
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	051b      	lsls	r3, r3, #20
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <TIM_OC6_SetConfig+0xac>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d007      	beq.n	8003680 <TIM_OC6_SetConfig+0x68>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <TIM_OC6_SetConfig+0xb0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_OC6_SetConfig+0x68>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a14      	ldr	r2, [pc, #80]	; (80036cc <TIM_OC6_SetConfig+0xb4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d109      	bne.n	8003694 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <TIM_OC6_SetConfig+0xb8>)
 8003684:	4013      	ands	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	029b      	lsls	r3, r3, #10
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b006      	add	sp, #24
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	ffefffff 	.word	0xffefffff
 80036bc:	feff8fff 	.word	0xfeff8fff
 80036c0:	ffdfffff 	.word	0xffdfffff
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40014400 	.word	0x40014400
 80036cc:	40014800 	.word	0x40014800
 80036d0:	fffbffff 	.word	0xfffbffff

080036d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	2201      	movs	r2, #1
 80036ee:	4393      	bics	r3, r2
 80036f0:	001a      	movs	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a1c      	ldr	r2, [pc, #112]	; (8003770 <TIM_TI1_SetConfig+0x9c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <TIM_TI1_SetConfig+0x38>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a1b      	ldr	r2, [pc, #108]	; (8003774 <TIM_TI1_SetConfig+0xa0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <TIM_TI1_SetConfig+0x3c>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <TIM_TI1_SetConfig+0x3e>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2203      	movs	r2, #3
 800371a:	4393      	bics	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e003      	b.n	8003730 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2201      	movs	r2, #1
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	22f0      	movs	r2, #240	; 0xf0
 8003734:	4393      	bics	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	22ff      	movs	r2, #255	; 0xff
 800373e:	4013      	ands	r3, r2
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	220a      	movs	r2, #10
 800374a:	4393      	bics	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	220a      	movs	r2, #10
 8003752:	4013      	ands	r3, r2
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	46bd      	mov	sp, r7
 800376a:	b006      	add	sp, #24
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400

08003778 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	2210      	movs	r2, #16
 8003792:	4393      	bics	r3, r2
 8003794:	001a      	movs	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <TIM_TI2_SetConfig+0x7c>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <TIM_TI2_SetConfig+0x80>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	031b      	lsls	r3, r3, #12
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	22a0      	movs	r2, #160	; 0xa0
 80037cc:	4393      	bics	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	22a0      	movs	r2, #160	; 0xa0
 80037d6:	4013      	ands	r3, r2
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	621a      	str	r2, [r3, #32]
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b006      	add	sp, #24
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	fffffcff 	.word	0xfffffcff
 80037f8:	ffff0fff 	.word	0xffff0fff

080037fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <TIM_TI3_SetConfig+0x78>)
 8003816:	401a      	ands	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2203      	movs	r2, #3
 8003826:	4393      	bics	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	22f0      	movs	r2, #240	; 0xf0
 8003836:	4393      	bics	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	22ff      	movs	r2, #255	; 0xff
 8003840:	4013      	ands	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <TIM_TI3_SetConfig+0x7c>)
 800384c:	4013      	ands	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	021a      	lsls	r2, r3, #8
 8003854:	23a0      	movs	r3, #160	; 0xa0
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	4013      	ands	r3, r2
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b006      	add	sp, #24
 8003872:	bd80      	pop	{r7, pc}
 8003874:	fffffeff 	.word	0xfffffeff
 8003878:	fffff5ff 	.word	0xfffff5ff

0800387c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <TIM_TI4_SetConfig+0x7c>)
 8003896:	401a      	ands	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <TIM_TI4_SetConfig+0x80>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4a12      	ldr	r2, [pc, #72]	; (8003900 <TIM_TI4_SetConfig+0x84>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	031b      	lsls	r3, r3, #12
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <TIM_TI4_SetConfig+0x88>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	031a      	lsls	r2, r3, #12
 80038d6:	23a0      	movs	r3, #160	; 0xa0
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	4013      	ands	r3, r2
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b006      	add	sp, #24
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	ffffefff 	.word	0xffffefff
 80038fc:	fffffcff 	.word	0xfffffcff
 8003900:	ffff0fff 	.word	0xffff0fff
 8003904:	ffff5fff 	.word	0xffff5fff

08003908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	221f      	movs	r2, #31
 8003918:	4013      	ands	r3, r2
 800391a:	2201      	movs	r2, #1
 800391c:	409a      	lsls	r2, r3
 800391e:	0013      	movs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	43d2      	mvns	r2, r2
 800392a:	401a      	ands	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1a      	ldr	r2, [r3, #32]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	211f      	movs	r1, #31
 8003938:	400b      	ands	r3, r1
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4099      	lsls	r1, r3
 800393e:	000b      	movs	r3, r1
 8003940:	431a      	orrs	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b006      	add	sp, #24
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	223c      	movs	r2, #60	; 0x3c
 800395e:	5c9b      	ldrb	r3, [r3, r2]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003964:	2302      	movs	r3, #2
 8003966:	e04a      	b.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	223c      	movs	r2, #60	; 0x3c
 800396c:	2101      	movs	r1, #1
 800396e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	223d      	movs	r2, #61	; 0x3d
 8003974:	2102      	movs	r1, #2
 8003976:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d108      	bne.n	80039a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003996:	4013      	ands	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2270      	movs	r2, #112	; 0x70
 80039a8:	4393      	bics	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a10      	ldr	r2, [pc, #64]	; (8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d10c      	bne.n	80039ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	4393      	bics	r3, r2
 80039d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	223d      	movs	r2, #61	; 0x3d
 80039f0:	2101      	movs	r1, #1
 80039f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	223c      	movs	r2, #60	; 0x3c
 80039f8:	2100      	movs	r1, #0
 80039fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	ff0fffff 	.word	0xff0fffff
 8003a10:	40000400 	.word	0x40000400

08003a14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	223c      	movs	r2, #60	; 0x3c
 8003a26:	5c9b      	ldrb	r3, [r3, r2]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e079      	b.n	8003b24 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	223c      	movs	r2, #60	; 0x3c
 8003a34:	2101      	movs	r1, #1
 8003a36:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	22ff      	movs	r2, #255	; 0xff
 8003a3c:	4393      	bics	r3, r2
 8003a3e:	001a      	movs	r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a38      	ldr	r2, [pc, #224]	; (8003b2c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003a4c:	401a      	ands	r2, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a35      	ldr	r2, [pc, #212]	; (8003b30 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a33      	ldr	r2, [pc, #204]	; (8003b34 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003a68:	401a      	ands	r2, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a30      	ldr	r2, [pc, #192]	; (8003b38 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003a76:	401a      	ands	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a2e      	ldr	r2, [pc, #184]	; (8003b3c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003a84:	401a      	ands	r2, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003a92:	401a      	ands	r2, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a29      	ldr	r2, [pc, #164]	; (8003b44 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a25      	ldr	r2, [pc, #148]	; (8003b48 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d106      	bne.n	8003ac4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a24      	ldr	r2, [pc, #144]	; (8003b4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003aba:	401a      	ands	r2, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	; (8003b48 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d121      	bne.n	8003b12 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	051b      	lsls	r3, r3, #20
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a1c      	ldr	r2, [pc, #112]	; (8003b54 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003af0:	401a      	ands	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d106      	bne.n	8003b12 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003b08:	401a      	ands	r2, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	223c      	movs	r2, #60	; 0x3c
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	0018      	movs	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b004      	add	sp, #16
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	fffffcff 	.word	0xfffffcff
 8003b30:	fffffbff 	.word	0xfffffbff
 8003b34:	fffff7ff 	.word	0xfffff7ff
 8003b38:	ffffefff 	.word	0xffffefff
 8003b3c:	ffffdfff 	.word	0xffffdfff
 8003b40:	ffffbfff 	.word	0xffffbfff
 8003b44:	fff0ffff 	.word	0xfff0ffff
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	efffffff 	.word	0xefffffff
 8003b50:	ff0fffff 	.word	0xff0fffff
 8003b54:	feffffff 	.word	0xfeffffff
 8003b58:	fdffffff 	.word	0xfdffffff
 8003b5c:	dfffffff 	.word	0xdfffffff

08003b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b002      	add	sp, #8
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b002      	add	sp, #8
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e046      	b.n	8003c30 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2288      	movs	r2, #136	; 0x88
 8003ba6:	589b      	ldr	r3, [r3, r2]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d107      	bne.n	8003bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2284      	movs	r2, #132	; 0x84
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7fd fb78 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2288      	movs	r2, #136	; 0x88
 8003bc0:	2124      	movs	r1, #36	; 0x24
 8003bc2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2101      	movs	r1, #1
 8003bd0:	438a      	bics	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 fe46 	bl	8004870 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 fcc4 	bl	8004574 <UART_SetConfig>
 8003bec:	0003      	movs	r3, r0
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e01c      	b.n	8003c30 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	490d      	ldr	r1, [pc, #52]	; (8003c38 <HAL_UART_Init+0xa8>)
 8003c02:	400a      	ands	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	212a      	movs	r1, #42	; 0x2a
 8003c12:	438a      	bics	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	430a      	orrs	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 fed5 	bl	80049d8 <UART_CheckIdleState>
 8003c2e:	0003      	movs	r3, r0
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b002      	add	sp, #8
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	ffffb7ff 	.word	0xffffb7ff

08003c3c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e04e      	b.n	8003cec <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2288      	movs	r2, #136	; 0x88
 8003c52:	589b      	ldr	r3, [r3, r2]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2284      	movs	r2, #132	; 0x84
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7fd fb22 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2288      	movs	r2, #136	; 0x88
 8003c6c:	2124      	movs	r1, #36	; 0x24
 8003c6e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	438a      	bics	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f000 fdf0 	bl	8004870 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	0018      	movs	r0, r3
 8003c94:	f000 fc6e 	bl	8004574 <UART_SetConfig>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e024      	b.n	8003cec <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4911      	ldr	r1, [pc, #68]	; (8003cf4 <HAL_HalfDuplex_Init+0xb8>)
 8003cae:	400a      	ands	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2122      	movs	r1, #34	; 0x22
 8003cbe:	438a      	bics	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2108      	movs	r1, #8
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2101      	movs	r1, #1
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 fe77 	bl	80049d8 <UART_CheckIdleState>
 8003cea:	0003      	movs	r3, r0
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	ffffb7ff 	.word	0xffffb7ff

08003cf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	1dbb      	adds	r3, r7, #6
 8003d06:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2288      	movs	r2, #136	; 0x88
 8003d0c:	589b      	ldr	r3, [r3, r2]
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d000      	beq.n	8003d14 <HAL_UART_Transmit+0x1c>
 8003d12:	e090      	b.n	8003e36 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_UART_Transmit+0x2a>
 8003d1a:	1dbb      	adds	r3, r7, #6
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e088      	b.n	8003e38 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	015b      	lsls	r3, r3, #5
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d109      	bne.n	8003d46 <HAL_UART_Transmit+0x4e>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d001      	beq.n	8003d46 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e078      	b.n	8003e38 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2290      	movs	r2, #144	; 0x90
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2288      	movs	r2, #136	; 0x88
 8003d52:	2121      	movs	r1, #33	; 0x21
 8003d54:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d56:	f7fd fc3b 	bl	80015d0 <HAL_GetTick>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1dba      	adds	r2, r7, #6
 8003d62:	2154      	movs	r1, #84	; 0x54
 8003d64:	8812      	ldrh	r2, [r2, #0]
 8003d66:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1dba      	adds	r2, r7, #6
 8003d6c:	2156      	movs	r1, #86	; 0x56
 8003d6e:	8812      	ldrh	r2, [r2, #0]
 8003d70:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	015b      	lsls	r3, r3, #5
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d108      	bne.n	8003d90 <HAL_UART_Transmit+0x98>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d104      	bne.n	8003d90 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	e003      	b.n	8003d98 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d98:	e030      	b.n	8003dfc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	0013      	movs	r3, r2
 8003da4:	2200      	movs	r2, #0
 8003da6:	2180      	movs	r1, #128	; 0x80
 8003da8:	f000 fec0 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8003dac:	1e03      	subs	r3, r0, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2288      	movs	r2, #136	; 0x88
 8003db4:	2120      	movs	r1, #32
 8003db6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e03d      	b.n	8003e38 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	001a      	movs	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	05d2      	lsls	r2, r2, #23
 8003dce:	0dd2      	lsrs	r2, r2, #23
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	e007      	b.n	8003dea <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3301      	adds	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2256      	movs	r2, #86	; 0x56
 8003dee:	5a9b      	ldrh	r3, [r3, r2]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b299      	uxth	r1, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2256      	movs	r2, #86	; 0x56
 8003dfa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2256      	movs	r2, #86	; 0x56
 8003e00:	5a9b      	ldrh	r3, [r3, r2]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1c8      	bne.n	8003d9a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	0013      	movs	r3, r2
 8003e12:	2200      	movs	r2, #0
 8003e14:	2140      	movs	r1, #64	; 0x40
 8003e16:	f000 fe89 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8003e1a:	1e03      	subs	r3, r0, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2288      	movs	r2, #136	; 0x88
 8003e22:	2120      	movs	r1, #32
 8003e24:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e006      	b.n	8003e38 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2288      	movs	r2, #136	; 0x88
 8003e2e:	2120      	movs	r1, #32
 8003e30:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
  }
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b008      	add	sp, #32
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	1dbb      	adds	r3, r7, #6
 8003e4c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	228c      	movs	r2, #140	; 0x8c
 8003e52:	589b      	ldr	r3, [r3, r2]
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d145      	bne.n	8003ee4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_UART_Receive_IT+0x26>
 8003e5e:	1dbb      	adds	r3, r7, #6
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e03d      	b.n	8003ee6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	015b      	lsls	r3, r3, #5
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d109      	bne.n	8003e8a <HAL_UART_Receive_IT+0x4a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d105      	bne.n	8003e8a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2201      	movs	r2, #1
 8003e82:	4013      	ands	r3, r2
 8003e84:	d001      	beq.n	8003e8a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e02d      	b.n	8003ee6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d019      	beq.n	8003ed2 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea2:	613b      	str	r3, [r7, #16]
  return(result);
 8003ea4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2180      	movs	r1, #128	; 0x80
 8003ec0:	04c9      	lsls	r1, r1, #19
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f383 8810 	msr	PRIMASK, r3
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ed2:	1dbb      	adds	r3, r7, #6
 8003ed4:	881a      	ldrh	r2, [r3, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	0018      	movs	r0, r3
 8003edc:	f000 fe90 	bl	8004c00 <UART_Start_Receive_IT>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	e000      	b.n	8003ee6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b008      	add	sp, #32
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ef0:	b5b0      	push	{r4, r5, r7, lr}
 8003ef2:	b0aa      	sub	sp, #168	; 0xa8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	22a4      	movs	r2, #164	; 0xa4
 8003f00:	18b9      	adds	r1, r7, r2
 8003f02:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	20a0      	movs	r0, #160	; 0xa0
 8003f0c:	1839      	adds	r1, r7, r0
 8003f0e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	249c      	movs	r4, #156	; 0x9c
 8003f18:	1939      	adds	r1, r7, r4
 8003f1a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f1c:	0011      	movs	r1, r2
 8003f1e:	18bb      	adds	r3, r7, r2
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4aa2      	ldr	r2, [pc, #648]	; (80041ac <HAL_UART_IRQHandler+0x2bc>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	2298      	movs	r2, #152	; 0x98
 8003f28:	18bd      	adds	r5, r7, r2
 8003f2a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003f2c:	18bb      	adds	r3, r7, r2
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d11a      	bne.n	8003f6a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d015      	beq.n	8003f6a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f3e:	183b      	adds	r3, r7, r0
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2220      	movs	r2, #32
 8003f44:	4013      	ands	r3, r2
 8003f46:	d105      	bne.n	8003f54 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f48:	193b      	adds	r3, r7, r4
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	055b      	lsls	r3, r3, #21
 8003f50:	4013      	ands	r3, r2
 8003f52:	d00a      	beq.n	8003f6a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d100      	bne.n	8003f5e <HAL_UART_IRQHandler+0x6e>
 8003f5c:	e2dc      	b.n	8004518 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	0010      	movs	r0, r2
 8003f66:	4798      	blx	r3
      }
      return;
 8003f68:	e2d6      	b.n	8004518 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f6a:	2398      	movs	r3, #152	; 0x98
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d100      	bne.n	8003f76 <HAL_UART_IRQHandler+0x86>
 8003f74:	e122      	b.n	80041bc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003f76:	239c      	movs	r3, #156	; 0x9c
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a8c      	ldr	r2, [pc, #560]	; (80041b0 <HAL_UART_IRQHandler+0x2c0>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d106      	bne.n	8003f90 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003f82:	23a0      	movs	r3, #160	; 0xa0
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a8a      	ldr	r2, [pc, #552]	; (80041b4 <HAL_UART_IRQHandler+0x2c4>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d100      	bne.n	8003f90 <HAL_UART_IRQHandler+0xa0>
 8003f8e:	e115      	b.n	80041bc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f90:	23a4      	movs	r3, #164	; 0xa4
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2201      	movs	r2, #1
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d012      	beq.n	8003fc2 <HAL_UART_IRQHandler+0xd2>
 8003f9c:	23a0      	movs	r3, #160	; 0xa0
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2290      	movs	r2, #144	; 0x90
 8003fb6:	589b      	ldr	r3, [r3, r2]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2190      	movs	r1, #144	; 0x90
 8003fc0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fc2:	23a4      	movs	r3, #164	; 0xa4
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d011      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x102>
 8003fce:	239c      	movs	r3, #156	; 0x9c
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2290      	movs	r2, #144	; 0x90
 8003fe6:	589b      	ldr	r3, [r3, r2]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2190      	movs	r1, #144	; 0x90
 8003ff0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ff2:	23a4      	movs	r3, #164	; 0xa4
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d011      	beq.n	8004022 <HAL_UART_IRQHandler+0x132>
 8003ffe:	239c      	movs	r3, #156	; 0x9c
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2201      	movs	r2, #1
 8004006:	4013      	ands	r3, r2
 8004008:	d00b      	beq.n	8004022 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2204      	movs	r2, #4
 8004010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2290      	movs	r2, #144	; 0x90
 8004016:	589b      	ldr	r3, [r3, r2]
 8004018:	2202      	movs	r2, #2
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2190      	movs	r1, #144	; 0x90
 8004020:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004022:	23a4      	movs	r3, #164	; 0xa4
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2208      	movs	r2, #8
 800402a:	4013      	ands	r3, r2
 800402c:	d017      	beq.n	800405e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800402e:	23a0      	movs	r3, #160	; 0xa0
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2220      	movs	r2, #32
 8004036:	4013      	ands	r3, r2
 8004038:	d105      	bne.n	8004046 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800403a:	239c      	movs	r3, #156	; 0x9c
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a5b      	ldr	r2, [pc, #364]	; (80041b0 <HAL_UART_IRQHandler+0x2c0>)
 8004042:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004044:	d00b      	beq.n	800405e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2208      	movs	r2, #8
 800404c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2290      	movs	r2, #144	; 0x90
 8004052:	589b      	ldr	r3, [r3, r2]
 8004054:	2208      	movs	r2, #8
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2190      	movs	r1, #144	; 0x90
 800405c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800405e:	23a4      	movs	r3, #164	; 0xa4
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	4013      	ands	r3, r2
 800406a:	d013      	beq.n	8004094 <HAL_UART_IRQHandler+0x1a4>
 800406c:	23a0      	movs	r3, #160	; 0xa0
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	04db      	lsls	r3, r3, #19
 8004076:	4013      	ands	r3, r2
 8004078:	d00c      	beq.n	8004094 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	0112      	lsls	r2, r2, #4
 8004082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2290      	movs	r2, #144	; 0x90
 8004088:	589b      	ldr	r3, [r3, r2]
 800408a:	2220      	movs	r2, #32
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2190      	movs	r1, #144	; 0x90
 8004092:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2290      	movs	r2, #144	; 0x90
 8004098:	589b      	ldr	r3, [r3, r2]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d100      	bne.n	80040a0 <HAL_UART_IRQHandler+0x1b0>
 800409e:	e23d      	b.n	800451c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80040a0:	23a4      	movs	r3, #164	; 0xa4
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2220      	movs	r2, #32
 80040a8:	4013      	ands	r3, r2
 80040aa:	d015      	beq.n	80040d8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040ac:	23a0      	movs	r3, #160	; 0xa0
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2220      	movs	r2, #32
 80040b4:	4013      	ands	r3, r2
 80040b6:	d106      	bne.n	80040c6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040b8:	239c      	movs	r3, #156	; 0x9c
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	055b      	lsls	r3, r3, #21
 80040c2:	4013      	ands	r3, r2
 80040c4:	d008      	beq.n	80040d8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	0010      	movs	r0, r2
 80040d6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2290      	movs	r2, #144	; 0x90
 80040dc:	589b      	ldr	r3, [r3, r2]
 80040de:	2194      	movs	r1, #148	; 0x94
 80040e0:	187a      	adds	r2, r7, r1
 80040e2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2240      	movs	r2, #64	; 0x40
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d004      	beq.n	80040fc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040f2:	187b      	adds	r3, r7, r1
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2228      	movs	r2, #40	; 0x28
 80040f8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040fa:	d04c      	beq.n	8004196 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 fea2 	bl	8004e48 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2240      	movs	r2, #64	; 0x40
 800410c:	4013      	ands	r3, r2
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d13c      	bne.n	800418c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004112:	f3ef 8310 	mrs	r3, PRIMASK
 8004116:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411a:	2090      	movs	r0, #144	; 0x90
 800411c:	183a      	adds	r2, r7, r0
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	2301      	movs	r3, #1
 8004122:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004126:	f383 8810 	msr	PRIMASK, r3
}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2140      	movs	r1, #64	; 0x40
 8004138:	438a      	bics	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	183b      	adds	r3, r7, r0
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004144:	f383 8810 	msr	PRIMASK, r3
}
 8004148:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	589b      	ldr	r3, [r3, r2]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d016      	beq.n	8004182 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	589b      	ldr	r3, [r3, r2]
 800415a:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <HAL_UART_IRQHandler+0x2c8>)
 800415c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2280      	movs	r2, #128	; 0x80
 8004162:	589b      	ldr	r3, [r3, r2]
 8004164:	0018      	movs	r0, r3
 8004166:	f7fd fb7d 	bl	8001864 <HAL_DMA_Abort_IT>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d01c      	beq.n	80041a8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2280      	movs	r2, #128	; 0x80
 8004172:	589b      	ldr	r3, [r3, r2]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	2180      	movs	r1, #128	; 0x80
 800417a:	5852      	ldr	r2, [r2, r1]
 800417c:	0010      	movs	r0, r2
 800417e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004180:	e012      	b.n	80041a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f000 f9e1 	bl	800454c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418a:	e00d      	b.n	80041a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	0018      	movs	r0, r3
 8004190:	f000 f9dc 	bl	800454c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	e008      	b.n	80041a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	0018      	movs	r0, r3
 800419a:	f000 f9d7 	bl	800454c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2290      	movs	r2, #144	; 0x90
 80041a2:	2100      	movs	r1, #0
 80041a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80041a6:	e1b9      	b.n	800451c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	46c0      	nop			; (mov r8, r8)
    return;
 80041aa:	e1b7      	b.n	800451c <HAL_UART_IRQHandler+0x62c>
 80041ac:	0000080f 	.word	0x0000080f
 80041b0:	10000001 	.word	0x10000001
 80041b4:	04000120 	.word	0x04000120
 80041b8:	08004f15 	.word	0x08004f15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d000      	beq.n	80041c6 <HAL_UART_IRQHandler+0x2d6>
 80041c4:	e13e      	b.n	8004444 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041c6:	23a4      	movs	r3, #164	; 0xa4
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2210      	movs	r2, #16
 80041ce:	4013      	ands	r3, r2
 80041d0:	d100      	bne.n	80041d4 <HAL_UART_IRQHandler+0x2e4>
 80041d2:	e137      	b.n	8004444 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041d4:	23a0      	movs	r3, #160	; 0xa0
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2210      	movs	r2, #16
 80041dc:	4013      	ands	r3, r2
 80041de:	d100      	bne.n	80041e2 <HAL_UART_IRQHandler+0x2f2>
 80041e0:	e130      	b.n	8004444 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2210      	movs	r2, #16
 80041e8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2240      	movs	r2, #64	; 0x40
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d000      	beq.n	80041fa <HAL_UART_IRQHandler+0x30a>
 80041f8:	e0a4      	b.n	8004344 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2280      	movs	r2, #128	; 0x80
 80041fe:	589b      	ldr	r3, [r3, r2]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	217e      	movs	r1, #126	; 0x7e
 8004206:	187b      	adds	r3, r7, r1
 8004208:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800420a:	187b      	adds	r3, r7, r1
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d100      	bne.n	8004214 <HAL_UART_IRQHandler+0x324>
 8004212:	e185      	b.n	8004520 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	225c      	movs	r2, #92	; 0x5c
 8004218:	5a9b      	ldrh	r3, [r3, r2]
 800421a:	187a      	adds	r2, r7, r1
 800421c:	8812      	ldrh	r2, [r2, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d300      	bcc.n	8004224 <HAL_UART_IRQHandler+0x334>
 8004222:	e17d      	b.n	8004520 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	187a      	adds	r2, r7, r1
 8004228:	215e      	movs	r1, #94	; 0x5e
 800422a:	8812      	ldrh	r2, [r2, #0]
 800422c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2280      	movs	r2, #128	; 0x80
 8004232:	589b      	ldr	r3, [r3, r2]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2220      	movs	r2, #32
 800423a:	4013      	ands	r3, r2
 800423c:	d170      	bne.n	8004320 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800423e:	f3ef 8310 	mrs	r3, PRIMASK
 8004242:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004246:	67bb      	str	r3, [r7, #120]	; 0x78
 8004248:	2301      	movs	r3, #1
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	f383 8810 	msr	PRIMASK, r3
}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	49b4      	ldr	r1, [pc, #720]	; (8004530 <HAL_UART_IRQHandler+0x640>)
 8004260:	400a      	ands	r2, r1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	f383 8810 	msr	PRIMASK, r3
}
 800426e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004270:	f3ef 8310 	mrs	r3, PRIMASK
 8004274:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004278:	677b      	str	r3, [r7, #116]	; 0x74
 800427a:	2301      	movs	r3, #1
 800427c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004280:	f383 8810 	msr	PRIMASK, r3
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	438a      	bics	r2, r1
 8004294:	609a      	str	r2, [r3, #8]
 8004296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004298:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429c:	f383 8810 	msr	PRIMASK, r3
}
 80042a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042a2:	f3ef 8310 	mrs	r3, PRIMASK
 80042a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80042a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042aa:	673b      	str	r3, [r7, #112]	; 0x70
 80042ac:	2301      	movs	r3, #1
 80042ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b2:	f383 8810 	msr	PRIMASK, r3
}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2140      	movs	r1, #64	; 0x40
 80042c4:	438a      	bics	r2, r1
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ce:	f383 8810 	msr	PRIMASK, r3
}
 80042d2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	228c      	movs	r2, #140	; 0x8c
 80042d8:	2120      	movs	r1, #32
 80042da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042e2:	f3ef 8310 	mrs	r3, PRIMASK
 80042e6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80042e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ec:	2301      	movs	r3, #1
 80042ee:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f2:	f383 8810 	msr	PRIMASK, r3
}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2110      	movs	r1, #16
 8004304:	438a      	bics	r2, r1
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430e:	f383 8810 	msr	PRIMASK, r3
}
 8004312:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	589b      	ldr	r3, [r3, r2]
 800431a:	0018      	movs	r0, r3
 800431c:	f7fd fa40 	bl	80017a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	225c      	movs	r2, #92	; 0x5c
 800432a:	5a9a      	ldrh	r2, [r3, r2]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	215e      	movs	r1, #94	; 0x5e
 8004330:	5a5b      	ldrh	r3, [r3, r1]
 8004332:	b29b      	uxth	r3, r3
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0011      	movs	r1, r2
 800433c:	0018      	movs	r0, r3
 800433e:	f000 f90d 	bl	800455c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004342:	e0ed      	b.n	8004520 <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	225c      	movs	r2, #92	; 0x5c
 8004348:	5a99      	ldrh	r1, [r3, r2]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	225e      	movs	r2, #94	; 0x5e
 800434e:	5a9b      	ldrh	r3, [r3, r2]
 8004350:	b29a      	uxth	r2, r3
 8004352:	208e      	movs	r0, #142	; 0x8e
 8004354:	183b      	adds	r3, r7, r0
 8004356:	1a8a      	subs	r2, r1, r2
 8004358:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	225e      	movs	r2, #94	; 0x5e
 800435e:	5a9b      	ldrh	r3, [r3, r2]
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d100      	bne.n	8004368 <HAL_UART_IRQHandler+0x478>
 8004366:	e0dd      	b.n	8004524 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004368:	183b      	adds	r3, r7, r0
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d100      	bne.n	8004372 <HAL_UART_IRQHandler+0x482>
 8004370:	e0d8      	b.n	8004524 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004372:	f3ef 8310 	mrs	r3, PRIMASK
 8004376:	60fb      	str	r3, [r7, #12]
  return(result);
 8004378:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800437a:	2488      	movs	r4, #136	; 0x88
 800437c:	193a      	adds	r2, r7, r4
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	2301      	movs	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f383 8810 	msr	PRIMASK, r3
}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4967      	ldr	r1, [pc, #412]	; (8004534 <HAL_UART_IRQHandler+0x644>)
 8004398:	400a      	ands	r2, r1
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	193b      	adds	r3, r7, r4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043aa:	f3ef 8310 	mrs	r3, PRIMASK
 80043ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80043b0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043b2:	2484      	movs	r4, #132	; 0x84
 80043b4:	193a      	adds	r2, r7, r4
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	2301      	movs	r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f383 8810 	msr	PRIMASK, r3
}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	495a      	ldr	r1, [pc, #360]	; (8004538 <HAL_UART_IRQHandler+0x648>)
 80043d0:	400a      	ands	r2, r1
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	193b      	adds	r3, r7, r4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	f383 8810 	msr	PRIMASK, r3
}
 80043e0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	228c      	movs	r2, #140	; 0x8c
 80043e6:	2120      	movs	r1, #32
 80043e8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043f6:	f3ef 8310 	mrs	r3, PRIMASK
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fe:	2480      	movs	r4, #128	; 0x80
 8004400:	193a      	adds	r2, r7, r4
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	2301      	movs	r3, #1
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	f383 8810 	msr	PRIMASK, r3
}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2110      	movs	r1, #16
 800441c:	438a      	bics	r2, r1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	193b      	adds	r3, r7, r4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	f383 8810 	msr	PRIMASK, r3
}
 800442c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004434:	183b      	adds	r3, r7, r0
 8004436:	881a      	ldrh	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f000 f88d 	bl	800455c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004442:	e06f      	b.n	8004524 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004444:	23a4      	movs	r3, #164	; 0xa4
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	035b      	lsls	r3, r3, #13
 800444e:	4013      	ands	r3, r2
 8004450:	d010      	beq.n	8004474 <HAL_UART_IRQHandler+0x584>
 8004452:	239c      	movs	r3, #156	; 0x9c
 8004454:	18fb      	adds	r3, r7, r3
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	03db      	lsls	r3, r3, #15
 800445c:	4013      	ands	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2280      	movs	r2, #128	; 0x80
 8004466:	0352      	lsls	r2, r2, #13
 8004468:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0018      	movs	r0, r3
 800446e:	f001 fa89 	bl	8005984 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004472:	e05a      	b.n	800452a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004474:	23a4      	movs	r3, #164	; 0xa4
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2280      	movs	r2, #128	; 0x80
 800447c:	4013      	ands	r3, r2
 800447e:	d016      	beq.n	80044ae <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004480:	23a0      	movs	r3, #160	; 0xa0
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	4013      	ands	r3, r2
 800448a:	d106      	bne.n	800449a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800448c:	239c      	movs	r3, #156	; 0x9c
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	041b      	lsls	r3, r3, #16
 8004496:	4013      	ands	r3, r2
 8004498:	d009      	beq.n	80044ae <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d042      	beq.n	8004528 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	0010      	movs	r0, r2
 80044aa:	4798      	blx	r3
    }
    return;
 80044ac:	e03c      	b.n	8004528 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044ae:	23a4      	movs	r3, #164	; 0xa4
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2240      	movs	r2, #64	; 0x40
 80044b6:	4013      	ands	r3, r2
 80044b8:	d00a      	beq.n	80044d0 <HAL_UART_IRQHandler+0x5e0>
 80044ba:	23a0      	movs	r3, #160	; 0xa0
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2240      	movs	r2, #64	; 0x40
 80044c2:	4013      	ands	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 fd3a 	bl	8004f42 <UART_EndTransmit_IT>
    return;
 80044ce:	e02c      	b.n	800452a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80044d0:	23a4      	movs	r3, #164	; 0xa4
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	041b      	lsls	r3, r3, #16
 80044da:	4013      	ands	r3, r2
 80044dc:	d00b      	beq.n	80044f6 <HAL_UART_IRQHandler+0x606>
 80044de:	23a0      	movs	r3, #160	; 0xa0
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	05db      	lsls	r3, r3, #23
 80044e8:	4013      	ands	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	0018      	movs	r0, r3
 80044f0:	f001 fa58 	bl	80059a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044f4:	e019      	b.n	800452a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80044f6:	23a4      	movs	r3, #164	; 0xa4
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	045b      	lsls	r3, r3, #17
 8004500:	4013      	ands	r3, r2
 8004502:	d012      	beq.n	800452a <HAL_UART_IRQHandler+0x63a>
 8004504:	23a0      	movs	r3, #160	; 0xa0
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	da0d      	bge.n	800452a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f001 fa3f 	bl	8005994 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004516:	e008      	b.n	800452a <HAL_UART_IRQHandler+0x63a>
      return;
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	e006      	b.n	800452a <HAL_UART_IRQHandler+0x63a>
    return;
 800451c:	46c0      	nop			; (mov r8, r8)
 800451e:	e004      	b.n	800452a <HAL_UART_IRQHandler+0x63a>
      return;
 8004520:	46c0      	nop			; (mov r8, r8)
 8004522:	e002      	b.n	800452a <HAL_UART_IRQHandler+0x63a>
      return;
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	e000      	b.n	800452a <HAL_UART_IRQHandler+0x63a>
    return;
 8004528:	46c0      	nop			; (mov r8, r8)
  }
}
 800452a:	46bd      	mov	sp, r7
 800452c:	b02a      	add	sp, #168	; 0xa8
 800452e:	bdb0      	pop	{r4, r5, r7, pc}
 8004530:	fffffeff 	.word	0xfffffeff
 8004534:	fffffedf 	.word	0xfffffedf
 8004538:	effffffe 	.word	0xeffffffe

0800453c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	46bd      	mov	sp, r7
 8004548:	b002      	add	sp, #8
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	b002      	add	sp, #8
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	000a      	movs	r2, r1
 8004566:	1cbb      	adds	r3, r7, #2
 8004568:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b002      	add	sp, #8
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800457c:	231e      	movs	r3, #30
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4aab      	ldr	r2, [pc, #684]	; (8004850 <UART_SetConfig+0x2dc>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	0019      	movs	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4aa6      	ldr	r2, [pc, #664]	; (8004854 <UART_SetConfig+0x2e0>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a9d      	ldr	r2, [pc, #628]	; (8004858 <UART_SetConfig+0x2e4>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	220f      	movs	r2, #15
 80045f8:	4393      	bics	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a93      	ldr	r2, [pc, #588]	; (800485c <UART_SetConfig+0x2e8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d127      	bne.n	8004662 <UART_SetConfig+0xee>
 8004612:	4b93      	ldr	r3, [pc, #588]	; (8004860 <UART_SetConfig+0x2ec>)
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	2203      	movs	r2, #3
 8004618:	4013      	ands	r3, r2
 800461a:	2b03      	cmp	r3, #3
 800461c:	d017      	beq.n	800464e <UART_SetConfig+0xda>
 800461e:	d81b      	bhi.n	8004658 <UART_SetConfig+0xe4>
 8004620:	2b02      	cmp	r3, #2
 8004622:	d00a      	beq.n	800463a <UART_SetConfig+0xc6>
 8004624:	d818      	bhi.n	8004658 <UART_SetConfig+0xe4>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <UART_SetConfig+0xbc>
 800462a:	2b01      	cmp	r3, #1
 800462c:	d00a      	beq.n	8004644 <UART_SetConfig+0xd0>
 800462e:	e013      	b.n	8004658 <UART_SetConfig+0xe4>
 8004630:	231f      	movs	r3, #31
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e021      	b.n	800467e <UART_SetConfig+0x10a>
 800463a:	231f      	movs	r3, #31
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	2202      	movs	r2, #2
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e01c      	b.n	800467e <UART_SetConfig+0x10a>
 8004644:	231f      	movs	r3, #31
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	2204      	movs	r2, #4
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e017      	b.n	800467e <UART_SetConfig+0x10a>
 800464e:	231f      	movs	r3, #31
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	2208      	movs	r2, #8
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e012      	b.n	800467e <UART_SetConfig+0x10a>
 8004658:	231f      	movs	r3, #31
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	2210      	movs	r2, #16
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e00d      	b.n	800467e <UART_SetConfig+0x10a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a7f      	ldr	r2, [pc, #508]	; (8004864 <UART_SetConfig+0x2f0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d104      	bne.n	8004676 <UART_SetConfig+0x102>
 800466c:	231f      	movs	r3, #31
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e003      	b.n	800467e <UART_SetConfig+0x10a>
 8004676:	231f      	movs	r3, #31
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	2210      	movs	r2, #16
 800467c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69da      	ldr	r2, [r3, #28]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	429a      	cmp	r2, r3
 8004688:	d000      	beq.n	800468c <UART_SetConfig+0x118>
 800468a:	e06f      	b.n	800476c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800468c:	231f      	movs	r3, #31
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b08      	cmp	r3, #8
 8004694:	d01f      	beq.n	80046d6 <UART_SetConfig+0x162>
 8004696:	dc22      	bgt.n	80046de <UART_SetConfig+0x16a>
 8004698:	2b04      	cmp	r3, #4
 800469a:	d017      	beq.n	80046cc <UART_SetConfig+0x158>
 800469c:	dc1f      	bgt.n	80046de <UART_SetConfig+0x16a>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <UART_SetConfig+0x134>
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d005      	beq.n	80046b2 <UART_SetConfig+0x13e>
 80046a6:	e01a      	b.n	80046de <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a8:	f7fd fdfa 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 80046ac:	0003      	movs	r3, r0
 80046ae:	61bb      	str	r3, [r7, #24]
        break;
 80046b0:	e01c      	b.n	80046ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80046b2:	4b6b      	ldr	r3, [pc, #428]	; (8004860 <UART_SetConfig+0x2ec>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2207      	movs	r2, #7
 80046ba:	4013      	ands	r3, r2
 80046bc:	3301      	adds	r3, #1
 80046be:	0019      	movs	r1, r3
 80046c0:	4869      	ldr	r0, [pc, #420]	; (8004868 <UART_SetConfig+0x2f4>)
 80046c2:	f7fb fd21 	bl	8000108 <__udivsi3>
 80046c6:	0003      	movs	r3, r0
 80046c8:	61bb      	str	r3, [r7, #24]
        break;
 80046ca:	e00f      	b.n	80046ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046cc:	f7fd fd9c 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80046d0:	0003      	movs	r3, r0
 80046d2:	61bb      	str	r3, [r7, #24]
        break;
 80046d4:	e00a      	b.n	80046ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	61bb      	str	r3, [r7, #24]
        break;
 80046dc:	e006      	b.n	80046ec <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046e2:	231e      	movs	r3, #30
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
        break;
 80046ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d100      	bne.n	80046f4 <UART_SetConfig+0x180>
 80046f2:	e097      	b.n	8004824 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f8:	4b5c      	ldr	r3, [pc, #368]	; (800486c <UART_SetConfig+0x2f8>)
 80046fa:	0052      	lsls	r2, r2, #1
 80046fc:	5ad3      	ldrh	r3, [r2, r3]
 80046fe:	0019      	movs	r1, r3
 8004700:	69b8      	ldr	r0, [r7, #24]
 8004702:	f7fb fd01 	bl	8000108 <__udivsi3>
 8004706:	0003      	movs	r3, r0
 8004708:	005a      	lsls	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	18d2      	adds	r2, r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	0019      	movs	r1, r3
 8004718:	0010      	movs	r0, r2
 800471a:	f7fb fcf5 	bl	8000108 <__udivsi3>
 800471e:	0003      	movs	r3, r0
 8004720:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b0f      	cmp	r3, #15
 8004726:	d91c      	bls.n	8004762 <UART_SetConfig+0x1ee>
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	025b      	lsls	r3, r3, #9
 800472e:	429a      	cmp	r2, r3
 8004730:	d217      	bcs.n	8004762 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	b29a      	uxth	r2, r3
 8004736:	200e      	movs	r0, #14
 8004738:	183b      	adds	r3, r7, r0
 800473a:	210f      	movs	r1, #15
 800473c:	438a      	bics	r2, r1
 800473e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	b29b      	uxth	r3, r3
 8004746:	2207      	movs	r2, #7
 8004748:	4013      	ands	r3, r2
 800474a:	b299      	uxth	r1, r3
 800474c:	183b      	adds	r3, r7, r0
 800474e:	183a      	adds	r2, r7, r0
 8004750:	8812      	ldrh	r2, [r2, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	183a      	adds	r2, r7, r0
 800475c:	8812      	ldrh	r2, [r2, #0]
 800475e:	60da      	str	r2, [r3, #12]
 8004760:	e060      	b.n	8004824 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004762:	231e      	movs	r3, #30
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	e05b      	b.n	8004824 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800476c:	231f      	movs	r3, #31
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b08      	cmp	r3, #8
 8004774:	d01f      	beq.n	80047b6 <UART_SetConfig+0x242>
 8004776:	dc22      	bgt.n	80047be <UART_SetConfig+0x24a>
 8004778:	2b04      	cmp	r3, #4
 800477a:	d017      	beq.n	80047ac <UART_SetConfig+0x238>
 800477c:	dc1f      	bgt.n	80047be <UART_SetConfig+0x24a>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <UART_SetConfig+0x214>
 8004782:	2b02      	cmp	r3, #2
 8004784:	d005      	beq.n	8004792 <UART_SetConfig+0x21e>
 8004786:	e01a      	b.n	80047be <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004788:	f7fd fd8a 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 800478c:	0003      	movs	r3, r0
 800478e:	61bb      	str	r3, [r7, #24]
        break;
 8004790:	e01c      	b.n	80047cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004792:	4b33      	ldr	r3, [pc, #204]	; (8004860 <UART_SetConfig+0x2ec>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2207      	movs	r2, #7
 800479a:	4013      	ands	r3, r2
 800479c:	3301      	adds	r3, #1
 800479e:	0019      	movs	r1, r3
 80047a0:	4831      	ldr	r0, [pc, #196]	; (8004868 <UART_SetConfig+0x2f4>)
 80047a2:	f7fb fcb1 	bl	8000108 <__udivsi3>
 80047a6:	0003      	movs	r3, r0
 80047a8:	61bb      	str	r3, [r7, #24]
        break;
 80047aa:	e00f      	b.n	80047cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ac:	f7fd fd2c 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80047b0:	0003      	movs	r3, r0
 80047b2:	61bb      	str	r3, [r7, #24]
        break;
 80047b4:	e00a      	b.n	80047cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	021b      	lsls	r3, r3, #8
 80047ba:	61bb      	str	r3, [r7, #24]
        break;
 80047bc:	e006      	b.n	80047cc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047c2:	231e      	movs	r3, #30
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
        break;
 80047ca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d028      	beq.n	8004824 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d6:	4b25      	ldr	r3, [pc, #148]	; (800486c <UART_SetConfig+0x2f8>)
 80047d8:	0052      	lsls	r2, r2, #1
 80047da:	5ad3      	ldrh	r3, [r2, r3]
 80047dc:	0019      	movs	r1, r3
 80047de:	69b8      	ldr	r0, [r7, #24]
 80047e0:	f7fb fc92 	bl	8000108 <__udivsi3>
 80047e4:	0003      	movs	r3, r0
 80047e6:	001a      	movs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	18d2      	adds	r2, r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0019      	movs	r1, r3
 80047f6:	0010      	movs	r0, r2
 80047f8:	f7fb fc86 	bl	8000108 <__udivsi3>
 80047fc:	0003      	movs	r3, r0
 80047fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b0f      	cmp	r3, #15
 8004804:	d90a      	bls.n	800481c <UART_SetConfig+0x2a8>
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	025b      	lsls	r3, r3, #9
 800480c:	429a      	cmp	r2, r3
 800480e:	d205      	bcs.n	800481c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	b29a      	uxth	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	e003      	b.n	8004824 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800481c:	231e      	movs	r3, #30
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	226a      	movs	r2, #106	; 0x6a
 8004828:	2101      	movs	r1, #1
 800482a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2268      	movs	r2, #104	; 0x68
 8004830:	2101      	movs	r1, #1
 8004832:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004840:	231e      	movs	r3, #30
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	781b      	ldrb	r3, [r3, #0]
}
 8004846:	0018      	movs	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	b008      	add	sp, #32
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	cfff69f3 	.word	0xcfff69f3
 8004854:	ffffcfff 	.word	0xffffcfff
 8004858:	11fff4ff 	.word	0x11fff4ff
 800485c:	40013800 	.word	0x40013800
 8004860:	40021000 	.word	0x40021000
 8004864:	40004400 	.word	0x40004400
 8004868:	02dc6c00 	.word	0x02dc6c00
 800486c:	08005ef0 	.word	0x08005ef0

08004870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	2208      	movs	r2, #8
 800487e:	4013      	ands	r3, r2
 8004880:	d00b      	beq.n	800489a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4a4a      	ldr	r2, [pc, #296]	; (80049b4 <UART_AdvFeatureConfig+0x144>)
 800488a:	4013      	ands	r3, r2
 800488c:	0019      	movs	r1, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	2201      	movs	r2, #1
 80048a0:	4013      	ands	r3, r2
 80048a2:	d00b      	beq.n	80048bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4a43      	ldr	r2, [pc, #268]	; (80049b8 <UART_AdvFeatureConfig+0x148>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	0019      	movs	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	2202      	movs	r2, #2
 80048c2:	4013      	ands	r3, r2
 80048c4:	d00b      	beq.n	80048de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a3b      	ldr	r2, [pc, #236]	; (80049bc <UART_AdvFeatureConfig+0x14c>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	0019      	movs	r1, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	2204      	movs	r2, #4
 80048e4:	4013      	ands	r3, r2
 80048e6:	d00b      	beq.n	8004900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4a34      	ldr	r2, [pc, #208]	; (80049c0 <UART_AdvFeatureConfig+0x150>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	0019      	movs	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	2210      	movs	r2, #16
 8004906:	4013      	ands	r3, r2
 8004908:	d00b      	beq.n	8004922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <UART_AdvFeatureConfig+0x154>)
 8004912:	4013      	ands	r3, r2
 8004914:	0019      	movs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	2220      	movs	r2, #32
 8004928:	4013      	ands	r3, r2
 800492a:	d00b      	beq.n	8004944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <UART_AdvFeatureConfig+0x158>)
 8004934:	4013      	ands	r3, r2
 8004936:	0019      	movs	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	2240      	movs	r2, #64	; 0x40
 800494a:	4013      	ands	r3, r2
 800494c:	d01d      	beq.n	800498a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	4a1d      	ldr	r2, [pc, #116]	; (80049cc <UART_AdvFeatureConfig+0x15c>)
 8004956:	4013      	ands	r3, r2
 8004958:	0019      	movs	r1, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	035b      	lsls	r3, r3, #13
 800496e:	429a      	cmp	r2, r3
 8004970:	d10b      	bne.n	800498a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	4a15      	ldr	r2, [pc, #84]	; (80049d0 <UART_AdvFeatureConfig+0x160>)
 800497a:	4013      	ands	r3, r2
 800497c:	0019      	movs	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	2280      	movs	r2, #128	; 0x80
 8004990:	4013      	ands	r3, r2
 8004992:	d00b      	beq.n	80049ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <UART_AdvFeatureConfig+0x164>)
 800499c:	4013      	ands	r3, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }
}
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b002      	add	sp, #8
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	ffff7fff 	.word	0xffff7fff
 80049b8:	fffdffff 	.word	0xfffdffff
 80049bc:	fffeffff 	.word	0xfffeffff
 80049c0:	fffbffff 	.word	0xfffbffff
 80049c4:	ffffefff 	.word	0xffffefff
 80049c8:	ffffdfff 	.word	0xffffdfff
 80049cc:	ffefffff 	.word	0xffefffff
 80049d0:	ff9fffff 	.word	0xff9fffff
 80049d4:	fff7ffff 	.word	0xfff7ffff

080049d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b092      	sub	sp, #72	; 0x48
 80049dc:	af02      	add	r7, sp, #8
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2290      	movs	r2, #144	; 0x90
 80049e4:	2100      	movs	r1, #0
 80049e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049e8:	f7fc fdf2 	bl	80015d0 <HAL_GetTick>
 80049ec:	0003      	movs	r3, r0
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2208      	movs	r2, #8
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d12d      	bne.n	8004a5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a00:	2280      	movs	r2, #128	; 0x80
 8004a02:	0391      	lsls	r1, r2, #14
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4a47      	ldr	r2, [pc, #284]	; (8004b24 <UART_CheckIdleState+0x14c>)
 8004a08:	9200      	str	r2, [sp, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f000 f88e 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8004a10:	1e03      	subs	r3, r0, #0
 8004a12:	d022      	beq.n	8004a5a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a14:	f3ef 8310 	mrs	r3, PRIMASK
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a1e:	2301      	movs	r3, #1
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	f383 8810 	msr	PRIMASK, r3
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2180      	movs	r1, #128	; 0x80
 8004a36:	438a      	bics	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	f383 8810 	msr	PRIMASK, r3
}
 8004a44:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2288      	movs	r2, #136	; 0x88
 8004a4a:	2120      	movs	r1, #32
 8004a4c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2284      	movs	r2, #132	; 0x84
 8004a52:	2100      	movs	r1, #0
 8004a54:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e060      	b.n	8004b1c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2204      	movs	r2, #4
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d146      	bne.n	8004af6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6a:	2280      	movs	r2, #128	; 0x80
 8004a6c:	03d1      	lsls	r1, r2, #15
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4a2c      	ldr	r2, [pc, #176]	; (8004b24 <UART_CheckIdleState+0x14c>)
 8004a72:	9200      	str	r2, [sp, #0]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f000 f859 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8004a7a:	1e03      	subs	r3, r0, #0
 8004a7c:	d03b      	beq.n	8004af6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a82:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a84:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
 8004a88:	2301      	movs	r3, #1
 8004a8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f383 8810 	msr	PRIMASK, r3
}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4922      	ldr	r1, [pc, #136]	; (8004b28 <UART_CheckIdleState+0x150>)
 8004aa0:	400a      	ands	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f383 8810 	msr	PRIMASK, r3
}
 8004aae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aba:	2301      	movs	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f383 8810 	msr	PRIMASK, r3
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	438a      	bics	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f383 8810 	msr	PRIMASK, r3
}
 8004ae0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	228c      	movs	r2, #140	; 0x8c
 8004ae6:	2120      	movs	r1, #32
 8004ae8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2284      	movs	r2, #132	; 0x84
 8004aee:	2100      	movs	r1, #0
 8004af0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e012      	b.n	8004b1c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2288      	movs	r2, #136	; 0x88
 8004afa:	2120      	movs	r1, #32
 8004afc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	228c      	movs	r2, #140	; 0x8c
 8004b02:	2120      	movs	r1, #32
 8004b04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2284      	movs	r2, #132	; 0x84
 8004b16:	2100      	movs	r1, #0
 8004b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b010      	add	sp, #64	; 0x40
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	01ffffff 	.word	0x01ffffff
 8004b28:	fffffedf 	.word	0xfffffedf

08004b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	1dfb      	adds	r3, r7, #7
 8004b3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3c:	e04b      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	3301      	adds	r3, #1
 8004b42:	d048      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b44:	f7fc fd44 	bl	80015d0 <HAL_GetTick>
 8004b48:	0002      	movs	r2, r0
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e04b      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2204      	movs	r2, #4
 8004b66:	4013      	ands	r3, r2
 8004b68:	d035      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	2208      	movs	r2, #8
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d111      	bne.n	8004b9c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 f960 	bl	8004e48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2290      	movs	r2, #144	; 0x90
 8004b8c:	2108      	movs	r1, #8
 8004b8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2284      	movs	r2, #132	; 0x84
 8004b94:	2100      	movs	r1, #0
 8004b96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e02c      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69da      	ldr	r2, [r3, #28]
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d112      	bne.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2280      	movs	r2, #128	; 0x80
 8004bb6:	0112      	lsls	r2, r2, #4
 8004bb8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 f943 	bl	8004e48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2290      	movs	r2, #144	; 0x90
 8004bc6:	2120      	movs	r1, #32
 8004bc8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2284      	movs	r2, #132	; 0x84
 8004bce:	2100      	movs	r1, #0
 8004bd0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e00f      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	4013      	ands	r3, r2
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	425a      	negs	r2, r3
 8004be6:	4153      	adcs	r3, r2
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	001a      	movs	r2, r3
 8004bec:	1dfb      	adds	r3, r7, #7
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d0a4      	beq.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b004      	add	sp, #16
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b098      	sub	sp, #96	; 0x60
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	1dbb      	adds	r3, r7, #6
 8004c0c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1dba      	adds	r2, r7, #6
 8004c18:	215c      	movs	r1, #92	; 0x5c
 8004c1a:	8812      	ldrh	r2, [r2, #0]
 8004c1c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1dba      	adds	r2, r7, #6
 8004c22:	215e      	movs	r1, #94	; 0x5e
 8004c24:	8812      	ldrh	r2, [r2, #0]
 8004c26:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	015b      	lsls	r3, r3, #5
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d10d      	bne.n	8004c56 <UART_Start_Receive_IT+0x56>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <UART_Start_Receive_IT+0x4c>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2260      	movs	r2, #96	; 0x60
 8004c46:	497b      	ldr	r1, [pc, #492]	; (8004e34 <UART_Start_Receive_IT+0x234>)
 8004c48:	5299      	strh	r1, [r3, r2]
 8004c4a:	e02e      	b.n	8004caa <UART_Start_Receive_IT+0xaa>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2260      	movs	r2, #96	; 0x60
 8004c50:	21ff      	movs	r1, #255	; 0xff
 8004c52:	5299      	strh	r1, [r3, r2]
 8004c54:	e029      	b.n	8004caa <UART_Start_Receive_IT+0xaa>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10d      	bne.n	8004c7a <UART_Start_Receive_IT+0x7a>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <UART_Start_Receive_IT+0x70>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2260      	movs	r2, #96	; 0x60
 8004c6a:	21ff      	movs	r1, #255	; 0xff
 8004c6c:	5299      	strh	r1, [r3, r2]
 8004c6e:	e01c      	b.n	8004caa <UART_Start_Receive_IT+0xaa>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2260      	movs	r2, #96	; 0x60
 8004c74:	217f      	movs	r1, #127	; 0x7f
 8004c76:	5299      	strh	r1, [r3, r2]
 8004c78:	e017      	b.n	8004caa <UART_Start_Receive_IT+0xaa>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	2380      	movs	r3, #128	; 0x80
 8004c80:	055b      	lsls	r3, r3, #21
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d10d      	bne.n	8004ca2 <UART_Start_Receive_IT+0xa2>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d104      	bne.n	8004c98 <UART_Start_Receive_IT+0x98>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2260      	movs	r2, #96	; 0x60
 8004c92:	217f      	movs	r1, #127	; 0x7f
 8004c94:	5299      	strh	r1, [r3, r2]
 8004c96:	e008      	b.n	8004caa <UART_Start_Receive_IT+0xaa>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2260      	movs	r2, #96	; 0x60
 8004c9c:	213f      	movs	r1, #63	; 0x3f
 8004c9e:	5299      	strh	r1, [r3, r2]
 8004ca0:	e003      	b.n	8004caa <UART_Start_Receive_IT+0xaa>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2260      	movs	r2, #96	; 0x60
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2290      	movs	r2, #144	; 0x90
 8004cae:	2100      	movs	r1, #0
 8004cb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	228c      	movs	r2, #140	; 0x8c
 8004cb6:	2122      	movs	r1, #34	; 0x22
 8004cb8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cba:	f3ef 8310 	mrs	r3, PRIMASK
 8004cbe:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cca:	f383 8810 	msr	PRIMASK, r3
}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2101      	movs	r1, #1
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce6:	f383 8810 	msr	PRIMASK, r3
}
 8004cea:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cf0:	2380      	movs	r3, #128	; 0x80
 8004cf2:	059b      	lsls	r3, r3, #22
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d150      	bne.n	8004d9a <UART_Start_Receive_IT+0x19a>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2268      	movs	r2, #104	; 0x68
 8004cfc:	5a9b      	ldrh	r3, [r3, r2]
 8004cfe:	1dba      	adds	r2, r7, #6
 8004d00:	8812      	ldrh	r2, [r2, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d349      	bcc.n	8004d9a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	015b      	lsls	r3, r3, #5
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d107      	bne.n	8004d22 <UART_Start_Receive_IT+0x122>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d103      	bne.n	8004d22 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a46      	ldr	r2, [pc, #280]	; (8004e38 <UART_Start_Receive_IT+0x238>)
 8004d1e:	675a      	str	r2, [r3, #116]	; 0x74
 8004d20:	e002      	b.n	8004d28 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a45      	ldr	r2, [pc, #276]	; (8004e3c <UART_Start_Receive_IT+0x23c>)
 8004d26:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d019      	beq.n	8004d64 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d30:	f3ef 8310 	mrs	r3, PRIMASK
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	f383 8810 	msr	PRIMASK, r3
}
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	0049      	lsls	r1, r1, #1
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d5e:	f383 8810 	msr	PRIMASK, r3
}
 8004d62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d64:	f3ef 8310 	mrs	r3, PRIMASK
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004d6e:	2301      	movs	r3, #1
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	f383 8810 	msr	PRIMASK, r3
}
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2180      	movs	r1, #128	; 0x80
 8004d86:	0549      	lsls	r1, r1, #21
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d8e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	f383 8810 	msr	PRIMASK, r3
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	e047      	b.n	8004e2a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	2380      	movs	r3, #128	; 0x80
 8004da0:	015b      	lsls	r3, r3, #5
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d107      	bne.n	8004db6 <UART_Start_Receive_IT+0x1b6>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d103      	bne.n	8004db6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a23      	ldr	r2, [pc, #140]	; (8004e40 <UART_Start_Receive_IT+0x240>)
 8004db2:	675a      	str	r2, [r3, #116]	; 0x74
 8004db4:	e002      	b.n	8004dbc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <UART_Start_Receive_IT+0x244>)
 8004dba:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d019      	beq.n	8004df8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004dca:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dce:	2301      	movs	r3, #1
 8004dd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	f383 8810 	msr	PRIMASK, r3
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2190      	movs	r1, #144	; 0x90
 8004de6:	0049      	lsls	r1, r1, #1
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	f383 8810 	msr	PRIMASK, r3
}
 8004df6:	e018      	b.n	8004e2a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004df8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8004dfe:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e00:	653b      	str	r3, [r7, #80]	; 0x50
 8004e02:	2301      	movs	r3, #1
 8004e04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f383 8810 	msr	PRIMASK, r3
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2120      	movs	r1, #32
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	f383 8810 	msr	PRIMASK, r3
}
 8004e28:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b018      	add	sp, #96	; 0x60
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	000001ff 	.word	0x000001ff
 8004e38:	0800563d 	.word	0x0800563d
 8004e3c:	0800530d 	.word	0x0800530d
 8004e40:	08005155 	.word	0x08005155
 8004e44:	08004f9d 	.word	0x08004f9d

08004e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08e      	sub	sp, #56	; 0x38
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e50:	f3ef 8310 	mrs	r3, PRIMASK
 8004e54:	617b      	str	r3, [r7, #20]
  return(result);
 8004e56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4926      	ldr	r1, [pc, #152]	; (8004f0c <UART_EndRxTransfer+0xc4>)
 8004e72:	400a      	ands	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f383 8810 	msr	PRIMASK, r3
}
 8004e80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e82:	f3ef 8310 	mrs	r3, PRIMASK
 8004e86:	623b      	str	r3, [r7, #32]
  return(result);
 8004e88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	491b      	ldr	r1, [pc, #108]	; (8004f10 <UART_EndRxTransfer+0xc8>)
 8004ea4:	400a      	ands	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	f383 8810 	msr	PRIMASK, r3
}
 8004eb2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d118      	bne.n	8004eee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f383 8810 	msr	PRIMASK, r3
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2110      	movs	r1, #16
 8004ede:	438a      	bics	r2, r1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f383 8810 	msr	PRIMASK, r3
}
 8004eec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	228c      	movs	r2, #140	; 0x8c
 8004ef2:	2120      	movs	r1, #32
 8004ef4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b00e      	add	sp, #56	; 0x38
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	fffffedf 	.word	0xfffffedf
 8004f10:	effffffe 	.word	0xeffffffe

08004f14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	225e      	movs	r2, #94	; 0x5e
 8004f26:	2100      	movs	r1, #0
 8004f28:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2256      	movs	r2, #86	; 0x56
 8004f2e:	2100      	movs	r1, #0
 8004f30:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f7ff fb09 	bl	800454c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b004      	add	sp, #16
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f50:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	2301      	movs	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f383 8810 	msr	PRIMASK, r3
}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2140      	movs	r1, #64	; 0x40
 8004f6c:	438a      	bics	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f383 8810 	msr	PRIMASK, r3
}
 8004f7a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2288      	movs	r2, #136	; 0x88
 8004f80:	2120      	movs	r1, #32
 8004f82:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f7ff fad5 	bl	800453c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b006      	add	sp, #24
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b094      	sub	sp, #80	; 0x50
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fa4:	204e      	movs	r0, #78	; 0x4e
 8004fa6:	183b      	adds	r3, r7, r0
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	2160      	movs	r1, #96	; 0x60
 8004fac:	5a52      	ldrh	r2, [r2, r1]
 8004fae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	228c      	movs	r2, #140	; 0x8c
 8004fb4:	589b      	ldr	r3, [r3, r2]
 8004fb6:	2b22      	cmp	r3, #34	; 0x22
 8004fb8:	d000      	beq.n	8004fbc <UART_RxISR_8BIT+0x20>
 8004fba:	e0ba      	b.n	8005132 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fc2:	214c      	movs	r1, #76	; 0x4c
 8004fc4:	187b      	adds	r3, r7, r1
 8004fc6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	183b      	adds	r3, r7, r0
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b2d9      	uxtb	r1, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd8:	400a      	ands	r2, r1
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	225e      	movs	r2, #94	; 0x5e
 8004fec:	5a9b      	ldrh	r3, [r3, r2]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b299      	uxth	r1, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	225e      	movs	r2, #94	; 0x5e
 8004ff8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	225e      	movs	r2, #94	; 0x5e
 8004ffe:	5a9b      	ldrh	r3, [r3, r2]
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d000      	beq.n	8005008 <UART_RxISR_8BIT+0x6c>
 8005006:	e09c      	b.n	8005142 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005008:	f3ef 8310 	mrs	r3, PRIMASK
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005010:	64bb      	str	r3, [r7, #72]	; 0x48
 8005012:	2301      	movs	r3, #1
 8005014:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4948      	ldr	r1, [pc, #288]	; (800514c <UART_RxISR_8BIT+0x1b0>)
 800502a:	400a      	ands	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	f383 8810 	msr	PRIMASK, r3
}
 8005038:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800503a:	f3ef 8310 	mrs	r3, PRIMASK
 800503e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005042:	647b      	str	r3, [r7, #68]	; 0x44
 8005044:	2301      	movs	r3, #1
 8005046:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2101      	movs	r1, #1
 800505c:	438a      	bics	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005062:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	f383 8810 	msr	PRIMASK, r3
}
 800506a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	228c      	movs	r2, #140	; 0x8c
 8005070:	2120      	movs	r1, #32
 8005072:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	2380      	movs	r3, #128	; 0x80
 8005088:	041b      	lsls	r3, r3, #16
 800508a:	4013      	ands	r3, r2
 800508c:	d018      	beq.n	80050c0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800508e:	f3ef 8310 	mrs	r3, PRIMASK
 8005092:	61bb      	str	r3, [r7, #24]
  return(result);
 8005094:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005096:	643b      	str	r3, [r7, #64]	; 0x40
 8005098:	2301      	movs	r3, #1
 800509a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4928      	ldr	r1, [pc, #160]	; (8005150 <UART_RxISR_8BIT+0x1b4>)
 80050b0:	400a      	ands	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	f383 8810 	msr	PRIMASK, r3
}
 80050be:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d12f      	bne.n	8005128 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050ce:	f3ef 8310 	mrs	r3, PRIMASK
 80050d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80050d4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d8:	2301      	movs	r3, #1
 80050da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f383 8810 	msr	PRIMASK, r3
}
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2110      	movs	r1, #16
 80050f0:	438a      	bics	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f383 8810 	msr	PRIMASK, r3
}
 80050fe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	2210      	movs	r2, #16
 8005108:	4013      	ands	r3, r2
 800510a:	2b10      	cmp	r3, #16
 800510c:	d103      	bne.n	8005116 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2210      	movs	r2, #16
 8005114:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	225c      	movs	r2, #92	; 0x5c
 800511a:	5a9a      	ldrh	r2, [r3, r2]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	0011      	movs	r1, r2
 8005120:	0018      	movs	r0, r3
 8005122:	f7ff fa1b 	bl	800455c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005126:	e00c      	b.n	8005142 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	0018      	movs	r0, r3
 800512c:	f7fb fe38 	bl	8000da0 <HAL_UART_RxCpltCallback>
}
 8005130:	e007      	b.n	8005142 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699a      	ldr	r2, [r3, #24]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2108      	movs	r1, #8
 800513e:	430a      	orrs	r2, r1
 8005140:	619a      	str	r2, [r3, #24]
}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	46bd      	mov	sp, r7
 8005146:	b014      	add	sp, #80	; 0x50
 8005148:	bd80      	pop	{r7, pc}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	fffffedf 	.word	0xfffffedf
 8005150:	fbffffff 	.word	0xfbffffff

08005154 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b094      	sub	sp, #80	; 0x50
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800515c:	204e      	movs	r0, #78	; 0x4e
 800515e:	183b      	adds	r3, r7, r0
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	2160      	movs	r1, #96	; 0x60
 8005164:	5a52      	ldrh	r2, [r2, r1]
 8005166:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	228c      	movs	r2, #140	; 0x8c
 800516c:	589b      	ldr	r3, [r3, r2]
 800516e:	2b22      	cmp	r3, #34	; 0x22
 8005170:	d000      	beq.n	8005174 <UART_RxISR_16BIT+0x20>
 8005172:	e0ba      	b.n	80052ea <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800517a:	214c      	movs	r1, #76	; 0x4c
 800517c:	187b      	adds	r3, r7, r1
 800517e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005186:	187b      	adds	r3, r7, r1
 8005188:	183a      	adds	r2, r7, r0
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	8812      	ldrh	r2, [r2, #0]
 800518e:	4013      	ands	r3, r2
 8005190:	b29a      	uxth	r2, r3
 8005192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005194:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519a:	1c9a      	adds	r2, r3, #2
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	225e      	movs	r2, #94	; 0x5e
 80051a4:	5a9b      	ldrh	r3, [r3, r2]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b299      	uxth	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	225e      	movs	r2, #94	; 0x5e
 80051b0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	225e      	movs	r2, #94	; 0x5e
 80051b6:	5a9b      	ldrh	r3, [r3, r2]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d000      	beq.n	80051c0 <UART_RxISR_16BIT+0x6c>
 80051be:	e09c      	b.n	80052fa <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051c0:	f3ef 8310 	mrs	r3, PRIMASK
 80051c4:	623b      	str	r3, [r7, #32]
  return(result);
 80051c6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051c8:	647b      	str	r3, [r7, #68]	; 0x44
 80051ca:	2301      	movs	r3, #1
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	f383 8810 	msr	PRIMASK, r3
}
 80051d4:	46c0      	nop			; (mov r8, r8)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4948      	ldr	r1, [pc, #288]	; (8005304 <UART_RxISR_16BIT+0x1b0>)
 80051e2:	400a      	ands	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	f383 8810 	msr	PRIMASK, r3
}
 80051f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051f2:	f3ef 8310 	mrs	r3, PRIMASK
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fa:	643b      	str	r3, [r7, #64]	; 0x40
 80051fc:	2301      	movs	r3, #1
 80051fe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	f383 8810 	msr	PRIMASK, r3
}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2101      	movs	r1, #1
 8005214:	438a      	bics	r2, r1
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521e:	f383 8810 	msr	PRIMASK, r3
}
 8005222:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	228c      	movs	r2, #140	; 0x8c
 8005228:	2120      	movs	r1, #32
 800522a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	4013      	ands	r3, r2
 8005244:	d018      	beq.n	8005278 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005246:	f3ef 8310 	mrs	r3, PRIMASK
 800524a:	617b      	str	r3, [r7, #20]
  return(result);
 800524c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005250:	2301      	movs	r3, #1
 8005252:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f383 8810 	msr	PRIMASK, r3
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4928      	ldr	r1, [pc, #160]	; (8005308 <UART_RxISR_16BIT+0x1b4>)
 8005268:	400a      	ands	r2, r1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f383 8810 	msr	PRIMASK, r3
}
 8005276:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d12f      	bne.n	80052e0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005286:	f3ef 8310 	mrs	r3, PRIMASK
 800528a:	60bb      	str	r3, [r7, #8]
  return(result);
 800528c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005290:	2301      	movs	r3, #1
 8005292:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f383 8810 	msr	PRIMASK, r3
}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2110      	movs	r1, #16
 80052a8:	438a      	bics	r2, r1
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f383 8810 	msr	PRIMASK, r3
}
 80052b6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	2210      	movs	r2, #16
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d103      	bne.n	80052ce <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2210      	movs	r2, #16
 80052cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	225c      	movs	r2, #92	; 0x5c
 80052d2:	5a9a      	ldrh	r2, [r3, r2]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	0011      	movs	r1, r2
 80052d8:	0018      	movs	r0, r3
 80052da:	f7ff f93f 	bl	800455c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052de:	e00c      	b.n	80052fa <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	0018      	movs	r0, r3
 80052e4:	f7fb fd5c 	bl	8000da0 <HAL_UART_RxCpltCallback>
}
 80052e8:	e007      	b.n	80052fa <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2108      	movs	r1, #8
 80052f6:	430a      	orrs	r2, r1
 80052f8:	619a      	str	r2, [r3, #24]
}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b014      	add	sp, #80	; 0x50
 8005300:	bd80      	pop	{r7, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	fffffedf 	.word	0xfffffedf
 8005308:	fbffffff 	.word	0xfbffffff

0800530c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b0a0      	sub	sp, #128	; 0x80
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005314:	237a      	movs	r3, #122	; 0x7a
 8005316:	18fb      	adds	r3, r7, r3
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	2160      	movs	r1, #96	; 0x60
 800531c:	5a52      	ldrh	r2, [r2, r1]
 800531e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	228c      	movs	r2, #140	; 0x8c
 800533c:	589b      	ldr	r3, [r3, r2]
 800533e:	2b22      	cmp	r3, #34	; 0x22
 8005340:	d000      	beq.n	8005344 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005342:	e165      	b.n	8005610 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005344:	236e      	movs	r3, #110	; 0x6e
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	2168      	movs	r1, #104	; 0x68
 800534c:	5a52      	ldrh	r2, [r2, r1]
 800534e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005350:	e10c      	b.n	800556c <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005358:	216c      	movs	r1, #108	; 0x6c
 800535a:	187b      	adds	r3, r7, r1
 800535c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800535e:	187b      	adds	r3, r7, r1
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	237a      	movs	r3, #122	; 0x7a
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b2d9      	uxtb	r1, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	400a      	ands	r2, r1
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	225e      	movs	r2, #94	; 0x5e
 8005384:	5a9b      	ldrh	r3, [r3, r2]
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b299      	uxth	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	225e      	movs	r2, #94	; 0x5e
 8005390:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800539a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800539c:	2207      	movs	r2, #7
 800539e:	4013      	ands	r3, r2
 80053a0:	d049      	beq.n	8005436 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053a4:	2201      	movs	r2, #1
 80053a6:	4013      	ands	r3, r2
 80053a8:	d010      	beq.n	80053cc <UART_RxISR_8BIT_FIFOEN+0xc0>
 80053aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80053ac:	2380      	movs	r3, #128	; 0x80
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	4013      	ands	r3, r2
 80053b2:	d00b      	beq.n	80053cc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2201      	movs	r2, #1
 80053ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2290      	movs	r2, #144	; 0x90
 80053c0:	589b      	ldr	r3, [r3, r2]
 80053c2:	2201      	movs	r2, #1
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2190      	movs	r1, #144	; 0x90
 80053ca:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ce:	2202      	movs	r2, #2
 80053d0:	4013      	ands	r3, r2
 80053d2:	d00f      	beq.n	80053f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80053d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053d6:	2201      	movs	r2, #1
 80053d8:	4013      	ands	r3, r2
 80053da:	d00b      	beq.n	80053f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2202      	movs	r2, #2
 80053e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2290      	movs	r2, #144	; 0x90
 80053e8:	589b      	ldr	r3, [r3, r2]
 80053ea:	2204      	movs	r2, #4
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2190      	movs	r1, #144	; 0x90
 80053f2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053f6:	2204      	movs	r2, #4
 80053f8:	4013      	ands	r3, r2
 80053fa:	d00f      	beq.n	800541c <UART_RxISR_8BIT_FIFOEN+0x110>
 80053fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053fe:	2201      	movs	r2, #1
 8005400:	4013      	ands	r3, r2
 8005402:	d00b      	beq.n	800541c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2204      	movs	r2, #4
 800540a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2290      	movs	r2, #144	; 0x90
 8005410:	589b      	ldr	r3, [r3, r2]
 8005412:	2202      	movs	r2, #2
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2190      	movs	r1, #144	; 0x90
 800541a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2290      	movs	r2, #144	; 0x90
 8005420:	589b      	ldr	r3, [r3, r2]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	0018      	movs	r0, r3
 800542a:	f7ff f88f 	bl	800454c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2290      	movs	r2, #144	; 0x90
 8005432:	2100      	movs	r1, #0
 8005434:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	225e      	movs	r2, #94	; 0x5e
 800543a:	5a9b      	ldrh	r3, [r3, r2]
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d000      	beq.n	8005444 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005442:	e093      	b.n	800556c <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005444:	f3ef 8310 	mrs	r3, PRIMASK
 8005448:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800544c:	66bb      	str	r3, [r7, #104]	; 0x68
 800544e:	2301      	movs	r3, #1
 8005450:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4970      	ldr	r1, [pc, #448]	; (8005628 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 8005466:	400a      	ands	r2, r1
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800546c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005470:	f383 8810 	msr	PRIMASK, r3
}
 8005474:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005476:	f3ef 8310 	mrs	r3, PRIMASK
 800547a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800547c:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800547e:	667b      	str	r3, [r7, #100]	; 0x64
 8005480:	2301      	movs	r3, #1
 8005482:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005486:	f383 8810 	msr	PRIMASK, r3
}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4965      	ldr	r1, [pc, #404]	; (800562c <UART_RxISR_8BIT_FIFOEN+0x320>)
 8005498:	400a      	ands	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
 800549c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a2:	f383 8810 	msr	PRIMASK, r3
}
 80054a6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	228c      	movs	r2, #140	; 0x8c
 80054ac:	2120      	movs	r1, #32
 80054ae:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	4013      	ands	r3, r2
 80054c8:	d018      	beq.n	80054fc <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054ca:	f3ef 8310 	mrs	r3, PRIMASK
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054d2:	663b      	str	r3, [r7, #96]	; 0x60
 80054d4:	2301      	movs	r3, #1
 80054d6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	f383 8810 	msr	PRIMASK, r3
}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4951      	ldr	r1, [pc, #324]	; (8005630 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80054ec:	400a      	ands	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	f383 8810 	msr	PRIMASK, r3
}
 80054fa:	46c0      	nop			; (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d12f      	bne.n	8005564 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800550a:	f3ef 8310 	mrs	r3, PRIMASK
 800550e:	623b      	str	r3, [r7, #32]
  return(result);
 8005510:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005512:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005514:	2301      	movs	r3, #1
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	f383 8810 	msr	PRIMASK, r3
}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2110      	movs	r1, #16
 800552c:	438a      	bics	r2, r1
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	2210      	movs	r2, #16
 8005544:	4013      	ands	r3, r2
 8005546:	2b10      	cmp	r3, #16
 8005548:	d103      	bne.n	8005552 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2210      	movs	r2, #16
 8005550:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	225c      	movs	r2, #92	; 0x5c
 8005556:	5a9a      	ldrh	r2, [r3, r2]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	0011      	movs	r1, r2
 800555c:	0018      	movs	r0, r3
 800555e:	f7fe fffd 	bl	800455c <HAL_UARTEx_RxEventCallback>
 8005562:	e003      	b.n	800556c <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	0018      	movs	r0, r3
 8005568:	f7fb fc1a 	bl	8000da0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800556c:	236e      	movs	r3, #110	; 0x6e
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d004      	beq.n	8005580 <UART_RxISR_8BIT_FIFOEN+0x274>
 8005576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005578:	2220      	movs	r2, #32
 800557a:	4013      	ands	r3, r2
 800557c:	d000      	beq.n	8005580 <UART_RxISR_8BIT_FIFOEN+0x274>
 800557e:	e6e8      	b.n	8005352 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005580:	205a      	movs	r0, #90	; 0x5a
 8005582:	183b      	adds	r3, r7, r0
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	215e      	movs	r1, #94	; 0x5e
 8005588:	5a52      	ldrh	r2, [r2, r1]
 800558a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800558c:	0001      	movs	r1, r0
 800558e:	187b      	adds	r3, r7, r1
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d044      	beq.n	8005620 <UART_RxISR_8BIT_FIFOEN+0x314>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2268      	movs	r2, #104	; 0x68
 800559a:	5a9b      	ldrh	r3, [r3, r2]
 800559c:	187a      	adds	r2, r7, r1
 800559e:	8812      	ldrh	r2, [r2, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d23d      	bcs.n	8005620 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055a4:	f3ef 8310 	mrs	r3, PRIMASK
 80055a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80055aa:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055ac:	657b      	str	r3, [r7, #84]	; 0x54
 80055ae:	2301      	movs	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f383 8810 	msr	PRIMASK, r3
}
 80055b8:	46c0      	nop			; (mov r8, r8)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	491b      	ldr	r1, [pc, #108]	; (8005634 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80055c6:	400a      	ands	r2, r1
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f383 8810 	msr	PRIMASK, r3
}
 80055d4:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a17      	ldr	r2, [pc, #92]	; (8005638 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80055da:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055dc:	f3ef 8310 	mrs	r3, PRIMASK
 80055e0:	617b      	str	r3, [r7, #20]
  return(result);
 80055e2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055e4:	653b      	str	r3, [r7, #80]	; 0x50
 80055e6:	2301      	movs	r3, #1
 80055e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f383 8810 	msr	PRIMASK, r3
}
 80055f0:	46c0      	nop			; (mov r8, r8)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2120      	movs	r1, #32
 80055fe:	430a      	orrs	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005604:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f383 8810 	msr	PRIMASK, r3
}
 800560c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800560e:	e007      	b.n	8005620 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2108      	movs	r1, #8
 800561c:	430a      	orrs	r2, r1
 800561e:	619a      	str	r2, [r3, #24]
}
 8005620:	46c0      	nop			; (mov r8, r8)
 8005622:	46bd      	mov	sp, r7
 8005624:	b020      	add	sp, #128	; 0x80
 8005626:	bd80      	pop	{r7, pc}
 8005628:	fffffeff 	.word	0xfffffeff
 800562c:	effffffe 	.word	0xeffffffe
 8005630:	fbffffff 	.word	0xfbffffff
 8005634:	efffffff 	.word	0xefffffff
 8005638:	08004f9d 	.word	0x08004f9d

0800563c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b0a2      	sub	sp, #136	; 0x88
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005644:	2382      	movs	r3, #130	; 0x82
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	2160      	movs	r1, #96	; 0x60
 800564c:	5a52      	ldrh	r2, [r2, r1]
 800564e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	2284      	movs	r2, #132	; 0x84
 8005658:	18ba      	adds	r2, r7, r2
 800565a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	228c      	movs	r2, #140	; 0x8c
 8005670:	589b      	ldr	r3, [r3, r2]
 8005672:	2b22      	cmp	r3, #34	; 0x22
 8005674:	d000      	beq.n	8005678 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005676:	e16f      	b.n	8005958 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005678:	2376      	movs	r3, #118	; 0x76
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	2168      	movs	r1, #104	; 0x68
 8005680:	5a52      	ldrh	r2, [r2, r1]
 8005682:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005684:	e114      	b.n	80058b0 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800568c:	2174      	movs	r1, #116	; 0x74
 800568e:	187b      	adds	r3, r7, r1
 8005690:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005696:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005698:	187b      	adds	r3, r7, r1
 800569a:	2282      	movs	r2, #130	; 0x82
 800569c:	18ba      	adds	r2, r7, r2
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	8812      	ldrh	r2, [r2, #0]
 80056a2:	4013      	ands	r3, r2
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	225e      	movs	r2, #94	; 0x5e
 80056b8:	5a9b      	ldrh	r3, [r3, r2]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b299      	uxth	r1, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	225e      	movs	r2, #94	; 0x5e
 80056c4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	2184      	movs	r1, #132	; 0x84
 80056ce:	187a      	adds	r2, r7, r1
 80056d0:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056d2:	187b      	adds	r3, r7, r1
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2207      	movs	r2, #7
 80056d8:	4013      	ands	r3, r2
 80056da:	d04e      	beq.n	800577a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056dc:	187b      	adds	r3, r7, r1
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2201      	movs	r2, #1
 80056e2:	4013      	ands	r3, r2
 80056e4:	d010      	beq.n	8005708 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80056e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4013      	ands	r3, r2
 80056ee:	d00b      	beq.n	8005708 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2290      	movs	r2, #144	; 0x90
 80056fc:	589b      	ldr	r3, [r3, r2]
 80056fe:	2201      	movs	r2, #1
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2190      	movs	r1, #144	; 0x90
 8005706:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005708:	2384      	movs	r3, #132	; 0x84
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2202      	movs	r2, #2
 8005710:	4013      	ands	r3, r2
 8005712:	d00f      	beq.n	8005734 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005716:	2201      	movs	r2, #1
 8005718:	4013      	ands	r3, r2
 800571a:	d00b      	beq.n	8005734 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2202      	movs	r2, #2
 8005722:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2290      	movs	r2, #144	; 0x90
 8005728:	589b      	ldr	r3, [r3, r2]
 800572a:	2204      	movs	r2, #4
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2190      	movs	r1, #144	; 0x90
 8005732:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005734:	2384      	movs	r3, #132	; 0x84
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2204      	movs	r2, #4
 800573c:	4013      	ands	r3, r2
 800573e:	d00f      	beq.n	8005760 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005742:	2201      	movs	r2, #1
 8005744:	4013      	ands	r3, r2
 8005746:	d00b      	beq.n	8005760 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2204      	movs	r2, #4
 800574e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2290      	movs	r2, #144	; 0x90
 8005754:	589b      	ldr	r3, [r3, r2]
 8005756:	2202      	movs	r2, #2
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2190      	movs	r1, #144	; 0x90
 800575e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2290      	movs	r2, #144	; 0x90
 8005764:	589b      	ldr	r3, [r3, r2]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f7fe feed 	bl	800454c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2290      	movs	r2, #144	; 0x90
 8005776:	2100      	movs	r1, #0
 8005778:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	225e      	movs	r2, #94	; 0x5e
 800577e:	5a9b      	ldrh	r3, [r3, r2]
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d000      	beq.n	8005788 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005786:	e093      	b.n	80058b0 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005788:	f3ef 8310 	mrs	r3, PRIMASK
 800578c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800578e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005790:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005792:	2301      	movs	r3, #1
 8005794:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4971      	ldr	r1, [pc, #452]	; (8005970 <UART_RxISR_16BIT_FIFOEN+0x334>)
 80057aa:	400a      	ands	r2, r1
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b4:	f383 8810 	msr	PRIMASK, r3
}
 80057b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057ba:	f3ef 8310 	mrs	r3, PRIMASK
 80057be:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80057c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057c4:	2301      	movs	r3, #1
 80057c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ca:	f383 8810 	msr	PRIMASK, r3
}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4966      	ldr	r1, [pc, #408]	; (8005974 <UART_RxISR_16BIT_FIFOEN+0x338>)
 80057dc:	400a      	ands	r2, r1
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057e2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e6:	f383 8810 	msr	PRIMASK, r3
}
 80057ea:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	228c      	movs	r2, #140	; 0x8c
 80057f0:	2120      	movs	r1, #32
 80057f2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	2380      	movs	r3, #128	; 0x80
 8005808:	041b      	lsls	r3, r3, #16
 800580a:	4013      	ands	r3, r2
 800580c:	d018      	beq.n	8005840 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800580e:	f3ef 8310 	mrs	r3, PRIMASK
 8005812:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005816:	667b      	str	r3, [r7, #100]	; 0x64
 8005818:	2301      	movs	r3, #1
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581e:	f383 8810 	msr	PRIMASK, r3
}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4952      	ldr	r1, [pc, #328]	; (8005978 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005830:	400a      	ands	r2, r1
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	f383 8810 	msr	PRIMASK, r3
}
 800583e:	46c0      	nop			; (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d12f      	bne.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800584e:	f3ef 8310 	mrs	r3, PRIMASK
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005856:	663b      	str	r3, [r7, #96]	; 0x60
 8005858:	2301      	movs	r3, #1
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	f383 8810 	msr	PRIMASK, r3
}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2110      	movs	r1, #16
 8005870:	438a      	bics	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	f383 8810 	msr	PRIMASK, r3
}
 800587e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	2210      	movs	r2, #16
 8005888:	4013      	ands	r3, r2
 800588a:	2b10      	cmp	r3, #16
 800588c:	d103      	bne.n	8005896 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2210      	movs	r2, #16
 8005894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	225c      	movs	r2, #92	; 0x5c
 800589a:	5a9a      	ldrh	r2, [r3, r2]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	0011      	movs	r1, r2
 80058a0:	0018      	movs	r0, r3
 80058a2:	f7fe fe5b 	bl	800455c <HAL_UARTEx_RxEventCallback>
 80058a6:	e003      	b.n	80058b0 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fb fa78 	bl	8000da0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058b0:	2376      	movs	r3, #118	; 0x76
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d006      	beq.n	80058c8 <UART_RxISR_16BIT_FIFOEN+0x28c>
 80058ba:	2384      	movs	r3, #132	; 0x84
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2220      	movs	r2, #32
 80058c2:	4013      	ands	r3, r2
 80058c4:	d000      	beq.n	80058c8 <UART_RxISR_16BIT_FIFOEN+0x28c>
 80058c6:	e6de      	b.n	8005686 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058c8:	205e      	movs	r0, #94	; 0x5e
 80058ca:	183b      	adds	r3, r7, r0
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	215e      	movs	r1, #94	; 0x5e
 80058d0:	5a52      	ldrh	r2, [r2, r1]
 80058d2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058d4:	0001      	movs	r1, r0
 80058d6:	187b      	adds	r3, r7, r1
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d044      	beq.n	8005968 <UART_RxISR_16BIT_FIFOEN+0x32c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2268      	movs	r2, #104	; 0x68
 80058e2:	5a9b      	ldrh	r3, [r3, r2]
 80058e4:	187a      	adds	r2, r7, r1
 80058e6:	8812      	ldrh	r2, [r2, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d23d      	bcs.n	8005968 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80058ec:	f3ef 8310 	mrs	r3, PRIMASK
 80058f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80058f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80058f6:	2301      	movs	r3, #1
 80058f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f383 8810 	msr	PRIMASK, r3
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	491b      	ldr	r1, [pc, #108]	; (800597c <UART_RxISR_16BIT_FIFOEN+0x340>)
 800590e:	400a      	ands	r2, r1
 8005910:	609a      	str	r2, [r3, #8]
 8005912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005914:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f383 8810 	msr	PRIMASK, r3
}
 800591c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a17      	ldr	r2, [pc, #92]	; (8005980 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005922:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005924:	f3ef 8310 	mrs	r3, PRIMASK
 8005928:	61bb      	str	r3, [r7, #24]
  return(result);
 800592a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800592c:	657b      	str	r3, [r7, #84]	; 0x54
 800592e:	2301      	movs	r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f383 8810 	msr	PRIMASK, r3
}
 8005938:	46c0      	nop			; (mov r8, r8)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2120      	movs	r1, #32
 8005946:	430a      	orrs	r2, r1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800594c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f383 8810 	msr	PRIMASK, r3
}
 8005954:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005956:	e007      	b.n	8005968 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2108      	movs	r1, #8
 8005964:	430a      	orrs	r2, r1
 8005966:	619a      	str	r2, [r3, #24]
}
 8005968:	46c0      	nop			; (mov r8, r8)
 800596a:	46bd      	mov	sp, r7
 800596c:	b022      	add	sp, #136	; 0x88
 800596e:	bd80      	pop	{r7, pc}
 8005970:	fffffeff 	.word	0xfffffeff
 8005974:	effffffe 	.word	0xeffffffe
 8005978:	fbffffff 	.word	0xfbffffff
 800597c:	efffffff 	.word	0xefffffff
 8005980:	08005155 	.word	0x08005155

08005984 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80059ac:	46c0      	nop			; (mov r8, r8)
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b002      	add	sp, #8
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2284      	movs	r2, #132	; 0x84
 80059c0:	5c9b      	ldrb	r3, [r3, r2]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_UARTEx_DisableFifoMode+0x16>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e027      	b.n	8005a1a <HAL_UARTEx_DisableFifoMode+0x66>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2284      	movs	r2, #132	; 0x84
 80059ce:	2101      	movs	r1, #1
 80059d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2288      	movs	r2, #136	; 0x88
 80059d6:	2124      	movs	r1, #36	; 0x24
 80059d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2101      	movs	r1, #1
 80059ee:	438a      	bics	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4a0b      	ldr	r2, [pc, #44]	; (8005a24 <HAL_UARTEx_DisableFifoMode+0x70>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2288      	movs	r2, #136	; 0x88
 8005a0c:	2120      	movs	r1, #32
 8005a0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2284      	movs	r2, #132	; 0x84
 8005a14:	2100      	movs	r1, #0
 8005a16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b004      	add	sp, #16
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	dfffffff 	.word	0xdfffffff

08005a28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2284      	movs	r2, #132	; 0x84
 8005a36:	5c9b      	ldrb	r3, [r3, r2]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e02e      	b.n	8005a9e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2284      	movs	r2, #132	; 0x84
 8005a44:	2101      	movs	r1, #1
 8005a46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2288      	movs	r2, #136	; 0x88
 8005a4c:	2124      	movs	r1, #36	; 0x24
 8005a4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2101      	movs	r1, #1
 8005a64:	438a      	bics	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	08d9      	lsrs	r1, r3, #3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f000 f854 	bl	8005b2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2288      	movs	r2, #136	; 0x88
 8005a90:	2120      	movs	r1, #32
 8005a92:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2284      	movs	r2, #132	; 0x84
 8005a98:	2100      	movs	r1, #0
 8005a9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b004      	add	sp, #16
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2284      	movs	r2, #132	; 0x84
 8005ab6:	5c9b      	ldrb	r3, [r3, r2]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e02f      	b.n	8005b20 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2284      	movs	r2, #132	; 0x84
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2288      	movs	r2, #136	; 0x88
 8005acc:	2124      	movs	r1, #36	; 0x24
 8005ace:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	438a      	bics	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	4a0e      	ldr	r2, [pc, #56]	; (8005b28 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	0019      	movs	r1, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f000 f813 	bl	8005b2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2288      	movs	r2, #136	; 0x88
 8005b12:	2120      	movs	r1, #32
 8005b14:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2284      	movs	r2, #132	; 0x84
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b004      	add	sp, #16
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	f1ffffff 	.word	0xf1ffffff

08005b2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d108      	bne.n	8005b4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	226a      	movs	r2, #106	; 0x6a
 8005b40:	2101      	movs	r1, #1
 8005b42:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2268      	movs	r2, #104	; 0x68
 8005b48:	2101      	movs	r1, #1
 8005b4a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b4c:	e043      	b.n	8005bd6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b4e:	260f      	movs	r6, #15
 8005b50:	19bb      	adds	r3, r7, r6
 8005b52:	2208      	movs	r2, #8
 8005b54:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b56:	200e      	movs	r0, #14
 8005b58:	183b      	adds	r3, r7, r0
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	0e5b      	lsrs	r3, r3, #25
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	240d      	movs	r4, #13
 8005b6a:	193b      	adds	r3, r7, r4
 8005b6c:	2107      	movs	r1, #7
 8005b6e:	400a      	ands	r2, r1
 8005b70:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	0f5b      	lsrs	r3, r3, #29
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	250c      	movs	r5, #12
 8005b7e:	197b      	adds	r3, r7, r5
 8005b80:	2107      	movs	r1, #7
 8005b82:	400a      	ands	r2, r1
 8005b84:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b86:	183b      	adds	r3, r7, r0
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	197a      	adds	r2, r7, r5
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	4914      	ldr	r1, [pc, #80]	; (8005be0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005b90:	5c8a      	ldrb	r2, [r1, r2]
 8005b92:	435a      	muls	r2, r3
 8005b94:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b96:	197b      	adds	r3, r7, r5
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005b9c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	f7fa fb3c 	bl	800021c <__divsi3>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	b299      	uxth	r1, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	226a      	movs	r2, #106	; 0x6a
 8005bac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bae:	19bb      	adds	r3, r7, r6
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	193a      	adds	r2, r7, r4
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	490a      	ldr	r1, [pc, #40]	; (8005be0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005bb8:	5c8a      	ldrb	r2, [r1, r2]
 8005bba:	435a      	muls	r2, r3
 8005bbc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bbe:	193b      	adds	r3, r7, r4
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	4a08      	ldr	r2, [pc, #32]	; (8005be4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005bc4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bc6:	0019      	movs	r1, r3
 8005bc8:	f7fa fb28 	bl	800021c <__divsi3>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	b299      	uxth	r1, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2268      	movs	r2, #104	; 0x68
 8005bd4:	5299      	strh	r1, [r3, r2]
}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	b005      	add	sp, #20
 8005bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	08005f08 	.word	0x08005f08
 8005be4:	08005f10 	.word	0x08005f10

08005be8 <__itoa>:
 8005be8:	1e93      	subs	r3, r2, #2
 8005bea:	b510      	push	{r4, lr}
 8005bec:	000c      	movs	r4, r1
 8005bee:	2b22      	cmp	r3, #34	; 0x22
 8005bf0:	d904      	bls.n	8005bfc <__itoa+0x14>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	001c      	movs	r4, r3
 8005bf6:	700b      	strb	r3, [r1, #0]
 8005bf8:	0020      	movs	r0, r4
 8005bfa:	bd10      	pop	{r4, pc}
 8005bfc:	2a0a      	cmp	r2, #10
 8005bfe:	d109      	bne.n	8005c14 <__itoa+0x2c>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	da07      	bge.n	8005c14 <__itoa+0x2c>
 8005c04:	232d      	movs	r3, #45	; 0x2d
 8005c06:	700b      	strb	r3, [r1, #0]
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4240      	negs	r0, r0
 8005c0c:	1861      	adds	r1, r4, r1
 8005c0e:	f000 f899 	bl	8005d44 <__utoa>
 8005c12:	e7f1      	b.n	8005bf8 <__itoa+0x10>
 8005c14:	2100      	movs	r1, #0
 8005c16:	e7f9      	b.n	8005c0c <__itoa+0x24>

08005c18 <itoa>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	f7ff ffe5 	bl	8005be8 <__itoa>
 8005c1e:	bd10      	pop	{r4, pc}

08005c20 <_strtol_l.constprop.0>:
 8005c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c22:	b087      	sub	sp, #28
 8005c24:	001e      	movs	r6, r3
 8005c26:	9005      	str	r0, [sp, #20]
 8005c28:	9101      	str	r1, [sp, #4]
 8005c2a:	9202      	str	r2, [sp, #8]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d048      	beq.n	8005cc2 <_strtol_l.constprop.0+0xa2>
 8005c30:	000b      	movs	r3, r1
 8005c32:	2e24      	cmp	r6, #36	; 0x24
 8005c34:	d845      	bhi.n	8005cc2 <_strtol_l.constprop.0+0xa2>
 8005c36:	4a3b      	ldr	r2, [pc, #236]	; (8005d24 <_strtol_l.constprop.0+0x104>)
 8005c38:	2108      	movs	r1, #8
 8005c3a:	4694      	mov	ip, r2
 8005c3c:	001a      	movs	r2, r3
 8005c3e:	4660      	mov	r0, ip
 8005c40:	7814      	ldrb	r4, [r2, #0]
 8005c42:	3301      	adds	r3, #1
 8005c44:	5d00      	ldrb	r0, [r0, r4]
 8005c46:	001d      	movs	r5, r3
 8005c48:	0007      	movs	r7, r0
 8005c4a:	400f      	ands	r7, r1
 8005c4c:	4208      	tst	r0, r1
 8005c4e:	d1f5      	bne.n	8005c3c <_strtol_l.constprop.0+0x1c>
 8005c50:	2c2d      	cmp	r4, #45	; 0x2d
 8005c52:	d13d      	bne.n	8005cd0 <_strtol_l.constprop.0+0xb0>
 8005c54:	2701      	movs	r7, #1
 8005c56:	781c      	ldrb	r4, [r3, #0]
 8005c58:	1c95      	adds	r5, r2, #2
 8005c5a:	2e00      	cmp	r6, #0
 8005c5c:	d05e      	beq.n	8005d1c <_strtol_l.constprop.0+0xfc>
 8005c5e:	2e10      	cmp	r6, #16
 8005c60:	d109      	bne.n	8005c76 <_strtol_l.constprop.0+0x56>
 8005c62:	2c30      	cmp	r4, #48	; 0x30
 8005c64:	d107      	bne.n	8005c76 <_strtol_l.constprop.0+0x56>
 8005c66:	2220      	movs	r2, #32
 8005c68:	782b      	ldrb	r3, [r5, #0]
 8005c6a:	4393      	bics	r3, r2
 8005c6c:	2b58      	cmp	r3, #88	; 0x58
 8005c6e:	d150      	bne.n	8005d12 <_strtol_l.constprop.0+0xf2>
 8005c70:	2610      	movs	r6, #16
 8005c72:	786c      	ldrb	r4, [r5, #1]
 8005c74:	3502      	adds	r5, #2
 8005c76:	4b2c      	ldr	r3, [pc, #176]	; (8005d28 <_strtol_l.constprop.0+0x108>)
 8005c78:	0031      	movs	r1, r6
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	9303      	str	r3, [sp, #12]
 8005c80:	f7fa fac8 	bl	8000214 <__aeabi_uidivmod>
 8005c84:	2200      	movs	r2, #0
 8005c86:	9104      	str	r1, [sp, #16]
 8005c88:	2101      	movs	r1, #1
 8005c8a:	4684      	mov	ip, r0
 8005c8c:	0010      	movs	r0, r2
 8005c8e:	4249      	negs	r1, r1
 8005c90:	0023      	movs	r3, r4
 8005c92:	3b30      	subs	r3, #48	; 0x30
 8005c94:	2b09      	cmp	r3, #9
 8005c96:	d903      	bls.n	8005ca0 <_strtol_l.constprop.0+0x80>
 8005c98:	3b11      	subs	r3, #17
 8005c9a:	2b19      	cmp	r3, #25
 8005c9c:	d81d      	bhi.n	8005cda <_strtol_l.constprop.0+0xba>
 8005c9e:	330a      	adds	r3, #10
 8005ca0:	429e      	cmp	r6, r3
 8005ca2:	dd1e      	ble.n	8005ce2 <_strtol_l.constprop.0+0xc2>
 8005ca4:	1c54      	adds	r4, r2, #1
 8005ca6:	d009      	beq.n	8005cbc <_strtol_l.constprop.0+0x9c>
 8005ca8:	000a      	movs	r2, r1
 8005caa:	4584      	cmp	ip, r0
 8005cac:	d306      	bcc.n	8005cbc <_strtol_l.constprop.0+0x9c>
 8005cae:	d102      	bne.n	8005cb6 <_strtol_l.constprop.0+0x96>
 8005cb0:	9c04      	ldr	r4, [sp, #16]
 8005cb2:	429c      	cmp	r4, r3
 8005cb4:	db02      	blt.n	8005cbc <_strtol_l.constprop.0+0x9c>
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4370      	muls	r0, r6
 8005cba:	1818      	adds	r0, r3, r0
 8005cbc:	782c      	ldrb	r4, [r5, #0]
 8005cbe:	3501      	adds	r5, #1
 8005cc0:	e7e6      	b.n	8005c90 <_strtol_l.constprop.0+0x70>
 8005cc2:	f000 f87b 	bl	8005dbc <__errno>
 8005cc6:	2316      	movs	r3, #22
 8005cc8:	6003      	str	r3, [r0, #0]
 8005cca:	2000      	movs	r0, #0
 8005ccc:	b007      	add	sp, #28
 8005cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd0:	2c2b      	cmp	r4, #43	; 0x2b
 8005cd2:	d1c2      	bne.n	8005c5a <_strtol_l.constprop.0+0x3a>
 8005cd4:	781c      	ldrb	r4, [r3, #0]
 8005cd6:	1c95      	adds	r5, r2, #2
 8005cd8:	e7bf      	b.n	8005c5a <_strtol_l.constprop.0+0x3a>
 8005cda:	0023      	movs	r3, r4
 8005cdc:	3b61      	subs	r3, #97	; 0x61
 8005cde:	2b19      	cmp	r3, #25
 8005ce0:	d9dd      	bls.n	8005c9e <_strtol_l.constprop.0+0x7e>
 8005ce2:	1c53      	adds	r3, r2, #1
 8005ce4:	d109      	bne.n	8005cfa <_strtol_l.constprop.0+0xda>
 8005ce6:	2322      	movs	r3, #34	; 0x22
 8005ce8:	9a05      	ldr	r2, [sp, #20]
 8005cea:	9803      	ldr	r0, [sp, #12]
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	9b02      	ldr	r3, [sp, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0eb      	beq.n	8005ccc <_strtol_l.constprop.0+0xac>
 8005cf4:	1e6b      	subs	r3, r5, #1
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	e007      	b.n	8005d0a <_strtol_l.constprop.0+0xea>
 8005cfa:	2f00      	cmp	r7, #0
 8005cfc:	d000      	beq.n	8005d00 <_strtol_l.constprop.0+0xe0>
 8005cfe:	4240      	negs	r0, r0
 8005d00:	9b02      	ldr	r3, [sp, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0e2      	beq.n	8005ccc <_strtol_l.constprop.0+0xac>
 8005d06:	2a00      	cmp	r2, #0
 8005d08:	d1f4      	bne.n	8005cf4 <_strtol_l.constprop.0+0xd4>
 8005d0a:	9b02      	ldr	r3, [sp, #8]
 8005d0c:	9a01      	ldr	r2, [sp, #4]
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e7dc      	b.n	8005ccc <_strtol_l.constprop.0+0xac>
 8005d12:	2430      	movs	r4, #48	; 0x30
 8005d14:	2e00      	cmp	r6, #0
 8005d16:	d1ae      	bne.n	8005c76 <_strtol_l.constprop.0+0x56>
 8005d18:	3608      	adds	r6, #8
 8005d1a:	e7ac      	b.n	8005c76 <_strtol_l.constprop.0+0x56>
 8005d1c:	2c30      	cmp	r4, #48	; 0x30
 8005d1e:	d0a2      	beq.n	8005c66 <_strtol_l.constprop.0+0x46>
 8005d20:	260a      	movs	r6, #10
 8005d22:	e7a8      	b.n	8005c76 <_strtol_l.constprop.0+0x56>
 8005d24:	08005f3e 	.word	0x08005f3e
 8005d28:	7fffffff 	.word	0x7fffffff

08005d2c <strtol>:
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	4c04      	ldr	r4, [pc, #16]	; (8005d40 <strtol+0x14>)
 8005d30:	0013      	movs	r3, r2
 8005d32:	000a      	movs	r2, r1
 8005d34:	0001      	movs	r1, r0
 8005d36:	6820      	ldr	r0, [r4, #0]
 8005d38:	f7ff ff72 	bl	8005c20 <_strtol_l.constprop.0>
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	20000068 	.word	0x20000068

08005d44 <__utoa>:
 8005d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d46:	000c      	movs	r4, r1
 8005d48:	0016      	movs	r6, r2
 8005d4a:	b08d      	sub	sp, #52	; 0x34
 8005d4c:	2225      	movs	r2, #37	; 0x25
 8005d4e:	0007      	movs	r7, r0
 8005d50:	4915      	ldr	r1, [pc, #84]	; (8005da8 <__utoa+0x64>)
 8005d52:	a802      	add	r0, sp, #8
 8005d54:	f000 f85c 	bl	8005e10 <memcpy>
 8005d58:	1e62      	subs	r2, r4, #1
 8005d5a:	1eb3      	subs	r3, r6, #2
 8005d5c:	2500      	movs	r5, #0
 8005d5e:	9201      	str	r2, [sp, #4]
 8005d60:	2b22      	cmp	r3, #34	; 0x22
 8005d62:	d904      	bls.n	8005d6e <__utoa+0x2a>
 8005d64:	7025      	strb	r5, [r4, #0]
 8005d66:	002c      	movs	r4, r5
 8005d68:	0020      	movs	r0, r4
 8005d6a:	b00d      	add	sp, #52	; 0x34
 8005d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6e:	0038      	movs	r0, r7
 8005d70:	0031      	movs	r1, r6
 8005d72:	f7fa fa4f 	bl	8000214 <__aeabi_uidivmod>
 8005d76:	000b      	movs	r3, r1
 8005d78:	aa02      	add	r2, sp, #8
 8005d7a:	5cd3      	ldrb	r3, [r2, r3]
 8005d7c:	9a01      	ldr	r2, [sp, #4]
 8005d7e:	0029      	movs	r1, r5
 8005d80:	3501      	adds	r5, #1
 8005d82:	5553      	strb	r3, [r2, r5]
 8005d84:	003b      	movs	r3, r7
 8005d86:	0007      	movs	r7, r0
 8005d88:	429e      	cmp	r6, r3
 8005d8a:	d9f0      	bls.n	8005d6e <__utoa+0x2a>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	0022      	movs	r2, r4
 8005d90:	5563      	strb	r3, [r4, r5]
 8005d92:	000b      	movs	r3, r1
 8005d94:	1ac8      	subs	r0, r1, r3
 8005d96:	4283      	cmp	r3, r0
 8005d98:	dde6      	ble.n	8005d68 <__utoa+0x24>
 8005d9a:	7810      	ldrb	r0, [r2, #0]
 8005d9c:	5ce5      	ldrb	r5, [r4, r3]
 8005d9e:	7015      	strb	r5, [r2, #0]
 8005da0:	54e0      	strb	r0, [r4, r3]
 8005da2:	3201      	adds	r2, #1
 8005da4:	3b01      	subs	r3, #1
 8005da6:	e7f5      	b.n	8005d94 <__utoa+0x50>
 8005da8:	08005f18 	.word	0x08005f18

08005dac <memset>:
 8005dac:	0003      	movs	r3, r0
 8005dae:	1882      	adds	r2, r0, r2
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	7019      	strb	r1, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <__errno>:
 8005dbc:	4b01      	ldr	r3, [pc, #4]	; (8005dc4 <__errno+0x8>)
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	4770      	bx	lr
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	20000068 	.word	0x20000068

08005dc8 <__libc_init_array>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	2600      	movs	r6, #0
 8005dcc:	4c0c      	ldr	r4, [pc, #48]	; (8005e00 <__libc_init_array+0x38>)
 8005dce:	4d0d      	ldr	r5, [pc, #52]	; (8005e04 <__libc_init_array+0x3c>)
 8005dd0:	1b64      	subs	r4, r4, r5
 8005dd2:	10a4      	asrs	r4, r4, #2
 8005dd4:	42a6      	cmp	r6, r4
 8005dd6:	d109      	bne.n	8005dec <__libc_init_array+0x24>
 8005dd8:	2600      	movs	r6, #0
 8005dda:	f000 f823 	bl	8005e24 <_init>
 8005dde:	4c0a      	ldr	r4, [pc, #40]	; (8005e08 <__libc_init_array+0x40>)
 8005de0:	4d0a      	ldr	r5, [pc, #40]	; (8005e0c <__libc_init_array+0x44>)
 8005de2:	1b64      	subs	r4, r4, r5
 8005de4:	10a4      	asrs	r4, r4, #2
 8005de6:	42a6      	cmp	r6, r4
 8005de8:	d105      	bne.n	8005df6 <__libc_init_array+0x2e>
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	00b3      	lsls	r3, r6, #2
 8005dee:	58eb      	ldr	r3, [r5, r3]
 8005df0:	4798      	blx	r3
 8005df2:	3601      	adds	r6, #1
 8005df4:	e7ee      	b.n	8005dd4 <__libc_init_array+0xc>
 8005df6:	00b3      	lsls	r3, r6, #2
 8005df8:	58eb      	ldr	r3, [r5, r3]
 8005dfa:	4798      	blx	r3
 8005dfc:	3601      	adds	r6, #1
 8005dfe:	e7f2      	b.n	8005de6 <__libc_init_array+0x1e>
 8005e00:	08006040 	.word	0x08006040
 8005e04:	08006040 	.word	0x08006040
 8005e08:	08006044 	.word	0x08006044
 8005e0c:	08006040 	.word	0x08006040

08005e10 <memcpy>:
 8005e10:	2300      	movs	r3, #0
 8005e12:	b510      	push	{r4, lr}
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d100      	bne.n	8005e1a <memcpy+0xa>
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	5ccc      	ldrb	r4, [r1, r3]
 8005e1c:	54c4      	strb	r4, [r0, r3]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	e7f8      	b.n	8005e14 <memcpy+0x4>
	...

08005e24 <_init>:
 8005e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2a:	bc08      	pop	{r3}
 8005e2c:	469e      	mov	lr, r3
 8005e2e:	4770      	bx	lr

08005e30 <_fini>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e36:	bc08      	pop	{r3}
 8005e38:	469e      	mov	lr, r3
 8005e3a:	4770      	bx	lr
